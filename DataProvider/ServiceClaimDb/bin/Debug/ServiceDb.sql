/*
Deployment script for ServiceDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ServiceDb"
:setvar DefaultFilePrefix "ServiceDb"
:setvar DefaultDataPath "C:\Users\anton.rehov\AppData\Local\Microsoft\VisualStudio\SSDT\DataProvider"
:setvar DefaultLogPath "C:\Users\anton.rehov\AppData\Local\Microsoft\VisualStudio\SSDT\DataProvider"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[service_sheet].[id_claim2claim_state] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[service_sheet])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'The following operation was generated from a refactoring log file a4c8791f-e93f-467c-b204-b3d94c84adfa';

PRINT N'Rename [dbo].[claims].[cliend_sd_num] to client_sd_num';


GO
EXECUTE sp_rename @objname = N'[dbo].[claims].[cliend_sd_num]', @newname = N'client_sd_num', @objtype = N'COLUMN';


GO
PRINT N'Rename refactoring operation with key bbed99bb-81f4-4fd0-b737-2e7036d6c94d is skipped, element [dbo].[claims].[current_engeneer_sid] (SqlSimpleColumn) will not be renamed to cur_engeneer_sid';


GO
PRINT N'Rename refactoring operation with key 8f116ff2-0393-4497-aa0d-7ee3ae5abde0 is skipped, element [dbo].[mobile_cames].[dattim1] (SqlSimpleColumn) will not be renamed to date_create';


GO
PRINT N'The following operation was generated from a refactoring log file 0803fe49-f0cd-4e84-aebe-4358935546bc';

PRINT N'Rename [dbo].[mobile_users].[id] to sid';


GO
EXECUTE sp_rename @objname = N'[dbo].[mobile_users].[id]', @newname = N'sid', @objtype = N'COLUMN';


GO
PRINT N'Rename refactoring operation with key 1768afd4-531b-4c54-bb36-9d96df569dcf is skipped, element [dbo].[mobile_cames].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 252dc46c-b211-4d27-9546-92911076617b is skipped, element [dbo].[mobile_cames].[desc] (SqlSimpleColumn) will not be renamed to descr';


GO
PRINT N'Rename refactoring operation with key 34d386d2-8024-4192-9d48-be644066bc8b is skipped, element [dbo].[issue_plan].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 3baeba77-cb7c-4c9c-85a1-45592fca3926 is skipped, element [dbo].[service_issue_plan].[id_issue] (SqlSimpleColumn) will not be renamed to id_service_issue';


GO
PRINT N'Rename refactoring operation with key dab1036a-0336-459b-babe-ed576f0d0cc0 is skipped, element [dbo].[service_issue_plan].[id_system] (SqlSimpleColumn) will not be renamed to id_service_issue_type';


GO
PRINT N'Dropping unnamed constraint on [dbo].[mobile_users]...';


GO
ALTER TABLE [dbo].[mobile_users] DROP CONSTRAINT [DF__mobile_us__enabl__619B8048];


GO
PRINT N'Dropping unnamed constraint on [dbo].[service_sheet]...';


GO
ALTER TABLE [dbo].[service_sheet] DROP CONSTRAINT [DF__service_s__count__06CD04F7];


GO
PRINT N'Dropping unnamed constraint on [dbo].[service_sheet]...';


GO
ALTER TABLE [dbo].[service_sheet] DROP CONSTRAINT [DF__service_s__zip_c__02084FDA];


GO
PRINT N'Dropping unnamed constraint on [dbo].[service_sheet]...';


GO
ALTER TABLE [dbo].[service_sheet] DROP CONSTRAINT [DF__service_s__proce__00200768];


GO
PRINT N'Dropping unnamed constraint on [dbo].[service_sheet]...';


GO
ALTER TABLE [dbo].[service_sheet] DROP CONSTRAINT [DF__service_s__devic__01142BA1];


GO
PRINT N'Altering [dbo].[claim2claim_states]...';


GO
ALTER TABLE [dbo].[claim2claim_states]
    ADD [id_service_sheet] INT NULL;


GO
PRINT N'Altering [dbo].[claims]...';


GO
ALTER TABLE [dbo].[claims]
    ADD [changer_sid]      VARCHAR (46) NULL,
        [cur_engeneer_sid] VARCHAR (46) NULL,
        [cur_admin_sid]    VARCHAR (46) NULL,
        [cur_tech_sid]     VARCHAR (46) NULL,
        [cur_manager_sid]  VARCHAR (46) NULL;


GO
PRINT N'Starting rebuilding table [dbo].[mobile_users]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mobile_users] (
    [id]       INT           IDENTITY (1, 1) NOT NULL,
    [sid]      VARCHAR (46)  DEFAULT newid() NOT NULL,
    [login]    NVARCHAR (50) NOT NULL,
    [password] NVARCHAR (50) NOT NULL,
    [enabled]  BIT           DEFAULT 1 NOT NULL,
    [dattim1]  DATETIME      DEFAULT getdate() NOT NULL,
    [dattim2]  DATETIME      DEFAULT '3.3.3333' NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mobile_users])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_mobile_users] ([sid], [login], [password], [enabled])
        SELECT [sid],
               [login],
               [password],
               [enabled]
        FROM   [dbo].[mobile_users];
    END

DROP TABLE [dbo].[mobile_users];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mobile_users]', N'mobile_users';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[service_sheet]...';


GO
ALTER TABLE [dbo].[service_sheet] DROP COLUMN [id_claim2claim_state];


GO
ALTER TABLE [dbo].[service_sheet] ALTER COLUMN [counter_unavailable] BIT NULL;

ALTER TABLE [dbo].[service_sheet] ALTER COLUMN [zip_claim] BIT NULL;


GO
ALTER TABLE [dbo].[service_sheet]
    ADD [counter_descr] NVARCHAR (MAX) NULL;


GO
PRINT N'Creating [dbo].[mobile_cames]...';


GO
CREATE TABLE [dbo].[mobile_cames] (
    [id]                INT            IDENTITY (1, 1) NOT NULL,
    [device_serial_num] NVARCHAR (20)  NOT NULL,
    [id_device]         INT            NULL,
    [device_model]      NVARCHAR (150) NULL,
    [city]              NVARCHAR (150) NULL,
    [address]           NVARCHAR (150) NULL,
    [client_name]       NVARCHAR (150) NULL,
    [id_work_type]      INT            NULL,
    [counter_mono]      BIGINT         NULL,
    [counter_color]     BIGINT         NULL,
    [counter_total]     BIGINT         NULL,
    [descr]             NVARCHAR (MAX) NULL,
    [specialist_sid]    VARCHAR (46)   NOT NULL,
    [date_create]       DATETIME       NOT NULL,
    [dattim1]           DATE           NOT NULL,
    [creator_sid]       VARCHAR (46)   NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[service_issue_plan]...';


GO
CREATE TABLE [dbo].[service_issue_plan] (
    [id]                    INT          IDENTITY (1, 1) NOT NULL,
    [id_service_issue]      INT          NOT NULL,
    [id_service_issue_type] INT          NOT NULL,
    [period_start]          DATE         NOT NULL,
    [period_end]            DATE         NOT NULL,
    [dattim1]               DATETIME     NOT NULL,
    [dattim2]               DATETIME     NOT NULL,
    [enabled]               INT          NOT NULL,
    [creator_sid]           VARCHAR (46) NOT NULL,
    [deleter_sid]           VARCHAR (46) NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[service_issue_plan].[IX_service_issue_plan_period_start]...';


GO
CREATE NONCLUSTERED INDEX [IX_service_issue_plan_period_start]
    ON [dbo].[service_issue_plan]([period_start] DESC);


GO
PRINT N'Creating [dbo].[service_issue_plan].[IX_service_issue_plan_period_end]...';


GO
CREATE NONCLUSTERED INDEX [IX_service_issue_plan_period_end]
    ON [dbo].[service_issue_plan]([period_end] DESC);


GO
PRINT N'Creating [dbo].[service_issue_plan].[IX_service_issue_plan_enabled]...';


GO
CREATE NONCLUSTERED INDEX [IX_service_issue_plan_enabled]
    ON [dbo].[service_issue_plan]([enabled] DESC);


GO
PRINT N'Creating [dbo].[service_issue_plan].[IX_service_issue_plan_service_type]...';


GO
CREATE NONCLUSTERED INDEX [IX_service_issue_plan_service_type]
    ON [dbo].[service_issue_plan]([id_service_issue_type] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[mobile_cames]...';


GO
ALTER TABLE [dbo].[mobile_cames]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_issue_plan]...';


GO
ALTER TABLE [dbo].[service_issue_plan]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_issue_plan]...';


GO
ALTER TABLE [dbo].[service_issue_plan]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_issue_plan]...';


GO
ALTER TABLE [dbo].[service_issue_plan]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Altering [dbo].[claims_view]...';


GO
ALTER VIEW [dbo].[claims_view]
	AS SELECT  c.id, c.sid, c.id_contractor, c.id_contract, c.id_device, c.contractor_name, 
	c.contract_number, c.device_name, c.id_admin, c.id_engeneer, c.id_claim_state, c.id_work_type,
	c.dattim1 as date_create, date_state_change, client_sd_num, changer_sid, cur_engeneer_sid, cur_admin_sid, cur_tech_sid, cur_manager_sid
	FROM claims c where c.enabled = 1
GO
PRINT N'Altering [dbo].[get_claim2claim_state_list]...';


GO
ALTER PROCEDURE [dbo].[get_claim2claim_state_list]
	@id_claim int
	as begin set nocount on;
	select c2cs.id, c2cs.id_claim, c2cs.id_claim_state, c2cs.dattim1, c2cs.creator_sid, c2cs.descr, cs.background_color, cs.foreground_color, 
	cs.sys_name, cs.name, c2cs.specialist_sid, c2cs.id_work_type, id_service_sheet 
	--,wt.sys_name as work_type_sys_name, wt.name as work_type_name
	from claim2claim_states c2cs
	inner join claim_states cs on c2cs.id_claim_state=cs.id
	--inner join work_types wt on c2cs.id_work_type=wt.id
	where c2cs.enabled=1 and cs.enabled=1 and c2cs.id_claim=@id_claim
	end
GO
PRINT N'Altering [dbo].[get_service_sheet]...';


GO
ALTER PROCEDURE [dbo].[get_service_sheet]
	@id int = null,
	@id_claim int = null,
	@id_claim2claim_state int = null
	as begin set nocount on;

	select s.id, c2cs.id_claim, c2cs.id as id_claim2claim_state, case when s.process_enabled=1 then 1 else 0 end as process_enabled, 
	case when s.device_enabled=1 then 1 else 0 end as device_enabled, case when s.zip_claim=1 then 1 else 0 end as zip_claim, s.zip_claim_number, 
	s.counter_mono, s.counter_color, counter_total, case when no_counter=1 then 1 else 0 end as no_counter,
	s.dattim1 as date_create, s.descr, case when counter_unavailable=1 then 1 else 0 end as counter_unavailable, counter_descr
	from service_sheet s 
	inner join claim2claim_states c2cs on s.id=c2cs.id_service_sheet
	where s.enabled=1 and c2cs.enabled=1 and
	(@id is null or @id <= 0 or (@id is not null and @id > 0 and s.id=@id)) and 
	(@id_claim is null or @id_claim <= 0 or (@id_claim is not null and @id_claim > 0 and c2cs.id_claim=@id_claim)) 
	and 
	(@id_claim2claim_state is null or @id_claim2claim_state <= 0 or (@id_claim2claim_state is not null and @id_claim2claim_state > 0 and c2cs.id=@id_claim2claim_state)) 

	end
GO
PRINT N'Altering [dbo].[save_claim2claim_state]...';


GO
ALTER PROCEDURE [dbo].[save_claim2claim_state]
	@id_claim int,
	@id_claim_state int,
	@creator_sid varchar(46),
	@descr nvarchar(max)=null,
	@specialist_sid varchar(46)=null,
	@id_work_type int = null,
	@id_service_sheet int = null
	as begin set nocount on;
	declare @id int
	insert into claim2claim_states(id_claim, id_claim_state, creator_sid, descr, specialist_sid, id_work_type, id_service_sheet)
	values (@id_claim, @id_claim_state, @creator_sid, @descr, @specialist_sid, @id_work_type, @id_service_sheet)	
	set @id = @@IDENTITY
	select @id as id
	end
GO
PRINT N'Altering [dbo].[clear_claim]...';


GO
ALTER PROCEDURE [dbo].[clear_claim]
	@id int = null,
	@sid varchar(46) = null,
	@clear_specialist_sid bit = 0,
	@clear_id_work_type bit = 0,
	@clear_engeneer_sid bit = 0,
	@clear_admin_sid bit = 0,
	@clear_tech_sid bit = 0,
	@clear_manager_sid bit =0
	as begin
	set nocount on;

	

	if (@id is not null and @id > 0 and exists(select 1 from claims where id=@id))
	begin	
		if @clear_specialist_sid = 1 
		begin
		update claims
		set specialist_sid = null
		where id=@id
		end

		if @clear_id_work_type = 1 
		begin
		update claims
		set id_work_type = 0
		where id=@id
		end

		if @clear_engeneer_sid = 1 
		begin
		update claims
		set cur_engeneer_sid = 0
		where id=@id
		end

		if @clear_admin_sid = 1 
		begin
		update claims
		set cur_admin_sid = 0
		where id=@id
		end

		if @clear_tech_sid = 1 
		begin
		update claims
		set cur_tech_sid = 0
		where id=@id
		end

		if @clear_manager_sid = 1 
		begin
		update claims
		set cur_manager_sid = 0
		where id=@id
		end
	end
	else if (@sid is not null and @sid <> '' and exists(select 1 from claims where sid=@sid))
	begin
		if @clear_specialist_sid = 1 
		begin
		update claims
		set specialist_sid = null
		where sid=@sid
		end

		if @clear_id_work_type = 1 
		begin
		update claims
		set id_work_type = 0
		where sid=@sid
		end

		if @clear_engeneer_sid = 1 
		begin
		update claims
		set cur_engeneer_sid = 0
		where sid=@sid
		end

		if @clear_admin_sid = 1 
		begin
		update claims
		set cur_admin_sid = 0
		where sid=@sid
		end

		if @clear_tech_sid = 1 
		begin
		update claims
		set cur_tech_sid = 0
		where sid=@sid
		end

		if @clear_manager_sid = 1 
		begin
		update claims
		set cur_manager_sid = 0
		where sid=@sid
		end
	end
	
	select @id as id
	end
GO
PRINT N'Altering [dbo].[get_claim]...';


GO
ALTER PROCEDURE [dbo].[get_claim]
	@id int = null,
	@sid varchar(46) = null
	as begin
	set nocount on;
	select c.id, c.sid, c.id_contractor, c.id_contract, c.id_device, c.contractor_name, c.contract_number, 
	c.device_name, c.id_admin, c.id_engeneer, c.id_claim_state, c.id_work_type, c.specialist_sid,
	c.dattim1 as date_create, date_state_change, client_sd_num, changer_sid, cur_engeneer_sid, cur_admin_sid, cur_tech_sid, cur_manager_sid
	from claims c
	where (@id is null or @id<= 0 or (@id is not null and @id> 0 and c.id=@id)) and
	(@sid is null or @sid= '' or (@id is not null and @sid!= '' and c.sid=@sid))
	end
GO
PRINT N'Altering [dbo].[save_claim]...';


GO
ALTER PROCEDURE [dbo].[save_claim]
	@id int = null,
	@sid varchar(46) = null,
	@id_contractor int = null,
	@id_contract int = null,
	@id_device int = null, 
	@contractor_name nvarchar(500) = null,
	@contract_number nvarchar(150) = null,
	@device_name nvarchar(500) = null,
	@creator_sid varchar(46),
	@id_admin int = null,
	@id_engeneer int = null,
	@id_work_type int = null,
	@specialist_sid varchar(46)=null,
	@client_sd_num nvarchar(50)=null,
	@cur_engeneer_sid varchar(46) = null,
	@cur_admin_sid varchar(46) = null,
	@cur_tech_sid varchar(46) = null,
	@cur_manager_sid varchar(46) = null

	--,	@id_claim_state int= null -- статус меняем отдельной процедурой
	as begin
	set nocount on;

	if (@id is not null and @id > 0 and exists(select 1 from claims where id=@id))
	begin
	--if @id_engeneer is null or @id_engeneer = 0 begin
	--select @id_admin = isnull(@id_admin,(select id_admin from claims where id=@id))
	--if @id_engeneer is null or @id_engeneer = 0 begin
	--	select @id_engeneer = isnull(@id_engeneer,(select id_engeneer from claims where id=@id))
	--	end
		if @id_work_type is null or @id_work_type = 0 begin
		select @id_work_type = id_work_type from claims where id=@id
		end

		select @specialist_sid = isnull(@specialist_sid,(select specialist_sid from claims where id=@id))

		select @cur_engeneer_sid = isnull(@cur_engeneer_sid,(select cur_engeneer_sid from claims where id=@id))
		select @cur_admin_sid = isnull(@cur_admin_sid,(select cur_admin_sid from claims where id=@id))
		select @cur_tech_sid = isnull(@cur_tech_sid,(select cur_tech_sid from claims where id=@id))
		select @cur_manager_sid = isnull(@cur_manager_sid,(select cur_manager_sid from claims where id=@id))

		update claims
		set 
		--creator_sid=@creator_sid,
		--id_admin=@id_admin, id_engeneer=@id_engeneer, 
		id_work_type=@id_work_type, specialist_sid=@specialist_sid,
		cur_engeneer_sid = @cur_engeneer_sid, cur_admin_sid=@cur_admin_sid, cur_tech_sid=@cur_tech_sid, cur_manager_sid=@cur_manager_sid
		--id_contractor = @id_contractor,id_contract=@id_contract,id_device=@id_device, contractor_name=@contractor_name, contract_number=@contract_number, device_name=@device_name, id_claim_state=@id_claim_state
		where id=@id
	end
	else if (@sid is not null and @sid <> '' and exists(select 1 from claims where sid=@sid))
	begin
	--select @id_admin = isnull(@id_admin,(select id_admin from claims where sid=@sid))
	--	select @id_engeneer = isnull(@id_engeneer,(select id_engeneer from claims where sid=@sid))
		if @id_work_type is null or @id_work_type = 0 begin
		select @id_work_type = id_work_type from claims where sid=@sid
		end

		select @specialist_sid = isnull(@specialist_sid,(select specialist_sid from claims where sid=@sid))

		select @cur_engeneer_sid = isnull(@cur_engeneer_sid,(select cur_engeneer_sid from claims where sid=@sid))
		select @cur_admin_sid = isnull(@cur_admin_sid,(select cur_admin_sid from claims where sid=@sid))
		select @cur_tech_sid = isnull(@cur_tech_sid,(select cur_tech_sid from claims where sid=@sid))
		select @cur_manager_sid = isnull(@cur_manager_sid,(select cur_manager_sid from claims where sid=@sid))

		update claims
		set 
		--creator_sid=@creator_sid,
		--id_admin=@id_admin, id_engeneer=@id_engeneer, 
		id_work_type=@id_work_type, specialist_sid=@specialist_sid,
		cur_engeneer_sid = @cur_engeneer_sid, cur_admin_sid=@cur_admin_sid, cur_tech_sid=@cur_tech_sid, cur_manager_sid=@cur_manager_sid
		--id_contractor = @id_contractor,id_contract=@id_contract,id_device=@id_device, contractor_name=@contractor_name, contract_number=@contract_number, device_name=@device_name, id_claim_state=@id_claim_state
		where sid=@sid
	end
	else
	begin
	insert into claims(id_contractor, id_contract, id_device, contractor_name, contract_number, device_name, creator_sid, 
	id_admin, id_engeneer, id_claim_state, id_work_type, date_state_change, client_sd_num, cur_engeneer_sid, cur_admin_sid, cur_tech_sid, cur_manager_sid)
	values(@id_contractor, @id_contract, @id_device, @contractor_name, @contract_number, @device_name, @creator_sid, 
	@id_admin, @id_engeneer, 0, 0, getdate(), @client_sd_num, @cur_engeneer_sid, @cur_admin_sid, @cur_tech_sid, @cur_manager_sid)
		set @id = @@IDENTITY
	end
	select @id as id
	end
GO
PRINT N'Altering [dbo].[set_claim_current_state]...';


GO
ALTER PROCEDURE [dbo].[set_claim_current_state]
	@id_claim int,
	@id_claim_state int,
	@creator_sid varchar(46)
	as begin set nocount on;
		update claims
		set id_claim_state = @id_claim_state, date_state_change = getdate(), changer_sid=@creator_sid where id=@id_claim
	end
GO
PRINT N'Altering [dbo].[get_claim_list]...';


GO
ALTER PROCEDURE [dbo].[get_claim_list]
	@id_admin int = null,
	@id_engeneer int = null,
	@date_start date = null,
	@date_end date = null,
	@top_rows int
	as begin
	set nocount on;
	--/////////
	-- Поправил запрос - ПОПРАВЬ ДАПРОС КОЛИЧЕСТВА get_claim_list_count
	--/////////
	select top (@top_rows) c.id, c.sid, c.id_contractor, c.id_contract, c.id_device, c.contractor_name, 
	c.contract_number, c.device_name, c.id_admin, c.id_engeneer, c.id_claim_state, c.id_work_type,
	c.date_create, date_state_change, client_sd_num, changer_sid, cur_engeneer_sid, cur_admin_sid, cur_tech_sid, cur_manager_sid
	from claims_view c
	order by c.id desc
	end
GO
PRINT N'Altering [dbo].[get_mobile_user_list]...';


GO
ALTER PROCEDURE [dbo].[get_mobile_user_list]
AS
	begin
	set nocount on;

	select sid, login, password from mobile_users
	where enabled = 1

	end
GO
PRINT N'Altering [dbo].[save_service_sheet]...';


GO
ALTER PROCEDURE [dbo].[save_service_sheet]
	@id int = null,
	@process_enabled bit = null,
	@device_enabled bit = null,
	@zip_claim bit = null,
	@zip_claim_number nvarchar(50) = null,
	@creator_sid varchar(46),
	@counter_mono bigint = null,
	@counter_color bigint = null,
	@counter_total bigint = null,
	@no_counter bit = null,
	@descr nvarchar(MAX) = null,
	@counter_unavailable bit = null,
	@counter_descr nvarchar(MAX) = null

	as begin set nocount on;

	if exists(select 1 from service_sheet where id=@id)
	begin
		--update service_sheet
		--set 
		--where id=@id
		select null
	end
	else begin
		insert into service_sheet (process_enabled, device_enabled, zip_claim, zip_claim_number, creator_sid, counter_mono, 
		counter_color, counter_total, no_counter,descr, counter_unavailable, counter_descr)
		values(@process_enabled, @device_enabled, @zip_claim, @zip_claim_number, @creator_sid, @counter_mono, 
		@counter_color, @counter_total, @no_counter, @descr, @counter_unavailable, @counter_descr)
		set @id = @@IDENTITY
	end

	select @id as id

	end
GO
PRINT N'Creating [dbo].[get_last_service_sheet_id]...';


GO
CREATE PROCEDURE [dbo].[get_last_service_sheet_id]
	@id_claim int
AS begin
set nocount on;
select top 1 c2cs.id_service_sheet 
from claim2claim_states c2cs where c2cs.id_claim=@id_claim and enabled=1
order by id desc

end
GO
PRINT N'Creating [dbo].[get_service_issue_plan]...';


GO
CREATE PROCEDURE [dbo].[get_service_issue_plan]
	@id int
AS
	begin set nocount on;

	select id,id_service_issue, id_service_issue_type, period_start, period_end,creator_sid from service_issue_plan
	where id=@id

	end
GO
PRINT N'Creating [dbo].[get_service_issue_plan_list]...';


GO
CREATE PROCEDURE [dbo].[get_service_issue_plan_list]
	@period_start date,
	@period_end date,
	@id_service_issue_type int = null
AS
	Set nocount on;
	select id,id_service_issue, id_service_issue_type, period_start, period_end,creator_sid from service_issue_plan
	where period_start >= @period_start and period_end<=@period_end


RETURN 0
GO
PRINT N'Creating [dbo].[save_mobile_came]...';


GO
CREATE PROCEDURE dbo.save_mobile_came
	@id INT = null, 
    @device_serial_num NVARCHAR(20) = NULL, 
    @id_device INT= NULL, 
    @device_model NVARCHAR(150) =NULL, 
    @city NVARCHAR(150) =NULL, 
    @address NVARCHAR(150) =NULL, 
    @client_name NVARCHAR(150) =NULL, 
    @id_work_type INT =NULL, 
    @counter_mono BIGINT =NULL, 
    @counter_color BIGINT =NULL, 
    @counter_total BIGINT =NULL, 
    @descr NVARCHAR(MAX) =NULL, 
    @specialist_sid VARCHAR(46) = NULL, 
    @date_create DATETIME = NULL,
	@creator_sid varchar(46)
	as begin
	set nocount on;
	INSERT INTO [dbo].[mobile_cames]
           ([device_serial_num]
           ,[id_device]
           ,[device_model]
           ,[city]
           ,[address]
           ,[client_name]
           ,[id_work_type]
           ,[counter_mono]
           ,[counter_color]
           ,[counter_total]
           ,[descr]
           ,[specialist_sid]
           ,[date_create]
           ,creator_sid)
     VALUES
           (@device_serial_num
           ,@id_device
           ,@device_model
           ,@city
           ,@address
           ,@client_name
           ,@id_work_type
           ,@counter_mono
           ,@counter_color
           ,@counter_total
           ,@descr
           ,@specialist_sid
           ,@date_create,
		   @creator_sid)
		   set @id = SCOPE_IDENTITY()
		   select @id as id
	end
GO
PRINT N'Creating [dbo].[save_service_issue_plan]...';


GO
CREATE PROCEDURE [dbo].[save_service_issue_plan]
	@id int = null,
	@id_service_issue int = null,
	@id_service_issue_type int = null,
	@period_start date = null,
	@period_end date = null,
	@creator_sid varchar(46) = null
	as begin
	set nocount on;

	if not exists (select 1 from service_issue_plan where enabled=1 and id_service_issue=@id_service_issue and id_service_issue_type=@id_service_issue_type)
	begin
		insert into service_issue_plan (id_service_issue, id_service_issue_type, period_start, period_end, creator_sid)
		values (@id_service_issue, @id_service_issue_type, @period_start, @period_end, @creator_sid)
		set @id=SCOPE_IDENTITY()
		select @id as id
	end 
	else
	begin
		declare @err_msg nvarchar(max)
		set @err_msg = ''
			 THROW 50000, @err_msg, 1;
			--select top 1 @id=id from service_issue_plan where enabled=1 and id_service_issue=@id_service_issue and id_service_issue_type=@id_service_issue_type
	end
	

	end
GO
PRINT N'Refreshing [dbo].[get_claim_current_state]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_claim_current_state]';


GO
PRINT N'Refreshing [dbo].[close_claim]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[close_claim]';


GO
PRINT N'Refreshing [dbo].[set_claim_claim_state]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[set_claim_claim_state]';


GO
PRINT N'Refreshing [dbo].[get_claim_list_count]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_claim_list_count]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a4c8791f-e93f-467c-b204-b3d94c84adfa')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a4c8791f-e93f-467c-b204-b3d94c84adfa')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bbed99bb-81f4-4fd0-b737-2e7036d6c94d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bbed99bb-81f4-4fd0-b737-2e7036d6c94d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8f116ff2-0393-4497-aa0d-7ee3ae5abde0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8f116ff2-0393-4497-aa0d-7ee3ae5abde0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0803fe49-f0cd-4e84-aebe-4358935546bc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0803fe49-f0cd-4e84-aebe-4358935546bc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1768afd4-531b-4c54-bb36-9d96df569dcf')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1768afd4-531b-4c54-bb36-9d96df569dcf')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '252dc46c-b211-4d27-9546-92911076617b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('252dc46c-b211-4d27-9546-92911076617b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '34d386d2-8024-4192-9d48-be644066bc8b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('34d386d2-8024-4192-9d48-be644066bc8b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3baeba77-cb7c-4c9c-85a1-45592fca3926')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3baeba77-cb7c-4c9c-85a1-45592fca3926')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dab1036a-0336-459b-babe-ed576f0d0cc0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dab1036a-0336-459b-babe-ed576f0d0cc0')

GO

GO
/*
Шаблон скрипта после развертывания							
--------------------------------------------------------------------------------------
 В данном файле содержатся инструкции SQL, которые будут добавлены в скрипт построения.		
 Используйте синтаксис SQLCMD для включения файла в скрипт после развертывания.			
 Пример:      :r .\myfile.sql								
 Используйте синтаксис SQLCMD для создания ссылки на переменную в скрипте после развертывания.		
 Пример:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GRANT EXECUTE ON SCHEMA ::dbo TO sqlUnit_prog
if not exists(select 1 from claim_states)
begin
	insert into claim_states (name, sys_name, order_num)
	values (N'Новая', N'NEW', 10)
	insert into claim_states (name, sys_name, order_num)
	values (N'Техподдержка', N'TECH', 20)
	insert into claim_states (name, sys_name, order_num)
	values (N'Назначено', N'SET', 30)
	insert into claim_states (name, sys_name, order_num)
	values (N'Выполнена', N'END', 40)
end
if not exists(select 1 from attributes)
begin

insert into attributes(sys_name, value)
values('CLSFRWAGE', '')
insert into attributes(sys_name, value)
values('CLSFROVERHEAD', '')

end
GO

GO
PRINT N'Update complete.';


GO
