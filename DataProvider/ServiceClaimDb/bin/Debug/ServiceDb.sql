/*
Deployment script for ServiceDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ServiceDb"
:setvar DefaultFilePrefix "ServiceDb"
:setvar DefaultDataPath "C:\Users\anton.rehov\AppData\Local\Microsoft\VisualStudio\SSDT\DataProvider"
:setvar DefaultLogPath "C:\Users\anton.rehov\AppData\Local\Microsoft\VisualStudio\SSDT\DataProvider"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[service_sheet_installed_zip_items]...';


GO
CREATE TABLE [dbo].[service_sheet_installed_zip_items] (
    [id]                  INT          IDENTITY (1, 1) NOT NULL,
    [id_service_sheet]    INT          NOT NULL,
    [id_ordered_zip_item] INT          NOT NULL,
    [dattim1]             DATETIME     NOT NULL,
    [dattim2]             DATETIME     NOT NULL,
    [creator_sid]         VARCHAR (46) NOT NULL,
    [deleter_sid]         VARCHAR (46) NULL,
    [enabled]             BIT          NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[service_sheet_issued_zip_items]...';


GO
CREATE TABLE [dbo].[service_sheet_issued_zip_items] (
    [id]                         INT            IDENTITY (1, 1) NOT NULL,
    [id_service_sheet]           INT            NOT NULL,
    [part_num]                   NVARCHAR (50)  NOT NULL,
    [name]                       NVARCHAR (500) NULL,
    [count]                      INT            NOT NULL,
    [dattim1]                    DATETIME       NOT NULL,
    [dattim2]                    DATETIME       NOT NULL,
    [creator_sid]                VARCHAR (46)   NOT NULL,
    [deleter_sid]                VARCHAR (46)   NULL,
    [enabled]                    BIT            NOT NULL,
    [id_zip_claim_unit]          INT            NULL,
    [installed]                  BIT            NOT NULL,
    [installed_sid]              VARCHAR (46)   NULL,
    [installed_cancel_sid]       VARCHAR (46)   NULL,
    [installed_id_service_sheet] INT            NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[service_sheet_not_installed_zip_items]...';


GO
CREATE TABLE [dbo].[service_sheet_not_installed_zip_items] (
    [id]                  INT          IDENTITY (1, 1) NOT NULL,
    [id_service_sheet]    INT          NOT NULL,
    [id_ordered_zip_item] INT          NOT NULL,
    [dattim1]             DATETIME     NOT NULL,
    [dattim2]             DATETIME     NOT NULL,
    [creator_sid]         VARCHAR (46) NOT NULL,
    [deleter_sid]         VARCHAR (46) NULL,
    [enabled]             BIT          NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[service_sheet_ordered_zip_items]...';


GO
CREATE TABLE [dbo].[service_sheet_ordered_zip_items] (
    [id]                INT            IDENTITY (1, 1) NOT NULL,
    [id_service_sheet]  INT            NOT NULL,
    [part_num]          NVARCHAR (50)  NOT NULL,
    [name]              NVARCHAR (500) NULL,
    [count]             INT            NOT NULL,
    [dattim1]           DATETIME       NOT NULL,
    [dattim2]           DATETIME       NOT NULL,
    [creator_sid]       VARCHAR (46)   NOT NULL,
    [deleter_sid]       VARCHAR (46)   NULL,
    [enabled]           BIT            NOT NULL,
    [id_zip_claim_unit] INT            NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_installed_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_installed_zip_items]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_installed_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_installed_zip_items]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_installed_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_installed_zip_items]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_issued_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_issued_zip_items]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_issued_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_issued_zip_items]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_issued_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_issued_zip_items]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_issued_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_issued_zip_items]
    ADD DEFAULT 0 FOR [installed];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_not_installed_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_not_installed_zip_items]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_not_installed_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_not_installed_zip_items]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_not_installed_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_not_installed_zip_items]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_ordered_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_ordered_zip_items]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_ordered_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_ordered_zip_items]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[service_sheet_ordered_zip_items]...';


GO
ALTER TABLE [dbo].[service_sheet_ordered_zip_items]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating [dbo].[SplitInt]...';


GO
create function [dbo].[SplitInt]
(
    @value varchar(max),
    @delimiter nvarchar(10)
)
returns @SplittedValues table
(
    value int
)
as
begin
    declare @SplitLength int
    
    while len(@value) > 0
    begin 
        select @SplitLength = (case charindex(@delimiter,@value) when 0 then
            len(@value) else charindex(@delimiter,@value) -1 end)
 
        insert into @SplittedValues
        select cast(substring(@value,1,@SplitLength) as int)
    
        select @value = (case (len(@value) - @SplitLength) when 0 then  ''
            else right(@value, len(@value) - @SplitLength - 1) end)
    end 
return  
end
GO
PRINT N'Altering [dbo].[get_service_issue_plan_list]...';


GO
ALTER PROCEDURE [dbo].[get_service_issue_plan_list]
	@period_start date,
	@period_end date,
	@id_service_issue_type int = null,
	@engeneer_sid varchar(46) = null
AS
begin
	Set nocount on;
	select id,id_service_issue, id_service_issue_type, period_start, period_end,creator_sid 
	from service_issue_plan
	where period_start >= @period_start and period_end<=@period_end

end
GO
PRINT N'Creating [dbo].[claim_ordered_zip_item_list_get]...';


GO
CREATE PROCEDURE [dbo].[claim_ordered_zip_item_list_get]
@claim_id int,
	@not_in_id_service_sheet int = null
	as begin
	set nocount on;
	select zi.id, zi.id_service_sheet, zi.part_num, zi.name, zi.count, zi.creator_sid, zi.id_zip_claim_unit, zi.dattim1 as date_create, zi.creator_sid,
	case when inst.id is null then 0 else 1 end as installed,
	inst.creator_sid as installed_sid,
	inst.id_service_sheet as installed_id_service_sheet,
	inst.creator_sid as installed_sid,
	inst.dattim1 as date_install
	from service_sheet_ordered_zip_items zi
	left join service_sheet_installed_zip_items inst on zi.id = inst.id_ordered_zip_item
	inner join service_sheet sh on zi.id_service_sheet=sh.id
	
	where zi.enabled=1 and sh.enabled=1 and sh.id_claim=@claim_id 
	and (@not_in_id_service_sheet is null or @not_in_id_service_sheet <= 0 or (sh.id != @not_in_id_service_sheet and sh.id != @not_in_id_service_sheet))
	--and zi.installed = 0

	end
GO
PRINT N'Creating [dbo].[service_sheet_installed_zip_item_get_list]...';


GO
CREATE PROCEDURE [dbo].[service_sheet_installed_zip_item_get_list]
	@id_service_sheet int
	as begin
	set nocount on;

	select i.id, i.id_service_sheet, i.dattim1 as date_install, i.creator_sid as installed_sid, o.part_num, o.name, o.count, o.id_zip_claim_unit	
	from service_sheet_installed_zip_items i 
	left join service_sheet_ordered_zip_items o on o.id = i.id_ordered_zip_item
	where i.enabled=1 and i.id_service_sheet=@id_service_sheet
	end
GO
PRINT N'Creating [dbo].[service_sheet_installed_zip_item_save]...';


GO
CREATE PROCEDURE [dbo].[service_sheet_installed_zip_item_save]
	@id_ordered_zip_item int,
	@creator_sid varchar(46),
	@id_service_sheet int,
	@installed bit = 1
as begin
	set nocount on;
	declare @part_num nvarchar(50), @name nvarchar(500), @count int, @id_zip_claim_unit int
	
	if @installed = 1
	begin


	insert into service_sheet_installed_zip_items (id_ordered_zip_item, id_service_sheet, creator_sid)
	values (@id_ordered_zip_item, @id_service_sheet,@creator_sid)

	--update service_sheet_zip_items
	--set installed = 1, installed_sid = @creator_sid, installed_id_service_sheet = @id_service_sheet
	--where id=@id
	end
	if @installed = 0
	begin

	update service_sheet_installed_zip_items
	set enabled=0, dattim2=getdate(),deleter_sid=@creator_sid
	where id_service_sheet=@id_service_sheet and id_ordered_zip_item=@id_ordered_zip_item

	--update service_sheet_zip_items
	--set installed = 0, installed_cancel_sid = @creator_sid, installed_id_service_sheet = null
	--where id=@id
	end
	end
GO
PRINT N'Creating [dbo].[service_sheet_issued_zip_item_close]...';


GO
CREATE PROCEDURE [dbo].[service_sheet_issued_zip_item_close]
	@id int, @deleter_sid varchar(46)
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE  service_sheet_issued_zip_items
        SET     enabled = 0, dattim2 = getdate(), deleter_sid=@deleter_sid
        WHERE   id = @id
    END
GO
PRINT N'Creating [dbo].[service_sheet_issued_zip_item_get]...';


GO
CREATE PROCEDURE [dbo].[service_sheet_issued_zip_item_get]
	@id int
	as begin
	set nocount on;

	select id, id_service_sheet, part_num, name, count, creator_sid, id_zip_claim_unit, dattim1 as date_create, creator_sid, installed, installed_sid, installed_cancel_sid, installed_id_service_sheet
	from service_sheet_issued_zip_items
	where id=@id
	end
GO
PRINT N'Creating [dbo].[service_sheet_issued_zip_item_get_list]...';


GO
CREATE PROCEDURE [dbo].[service_sheet_issued_zip_item_get_list]
	@id_service_sheet int
	as begin
	set nocount on;

	select id, id_service_sheet, part_num, name, count, creator_sid, id_zip_claim_unit, dattim1 as date_create, creator_sid, installed, installed_sid, installed_cancel_sid, installed_id_service_sheet
	from service_sheet_issued_zip_items
	where enabled=1 and id_service_sheet=@id_service_sheet
	end
GO
PRINT N'Creating [dbo].[service_sheet_issued_zip_item_save]...';


GO
CREATE PROCEDURE [dbo].[service_sheet_issued_zip_item_save]
	@id int = null,
	@id_service_sheet int,
	@part_num nvarchar(50),
	@name nvarchar(500) = null,
	@count int,
	@creator_sid varchar(46)
AS
begin
set nocount on;
	insert into service_sheet_issued_zip_items (id_service_sheet, part_num, name, count ,creator_sid)
	values (@id_service_sheet, @part_num, @name, @count ,@creator_sid)
end
GO
PRINT N'Creating [dbo].[service_sheet_not_installed_zip_item_get_list]...';


GO
CREATE PROCEDURE [dbo].[service_sheet_not_installed_zip_item_get_list]
	@id_service_sheet int
	as begin
	set nocount on;

	select ni.id, ni.id_service_sheet, o.part_num, o.name, o.count, ni.creator_sid, o.id_zip_claim_unit, ni.dattim1 as date_create
	from service_sheet_not_installed_zip_items ni
	left join service_sheet_ordered_zip_items o on o.id = ni.id_ordered_zip_item
	where ni.enabled=1 and ni.id_service_sheet=@id_service_sheet
	end
GO
PRINT N'Creating [dbo].[service_sheet_not_installed_zip_item_save_list]...';


GO
CREATE PROCEDURE [dbo].[service_sheet_not_installed_zip_item_save_list]
	@id_ordered_zip_item_list nvarchar(max),
	@id_service_sheet int,	
	@creator_sid varchar(46)
AS
begin
set nocount on;
declare @id_ordered_zip_item int
declare curs cursor FAST_FORWARD for
select value from SplitInt(@id_ordered_zip_item_list, ',')

OPEN curs

begin try

FETCH NEXT FROM curs
INTO @id_ordered_zip_item


BEGIN tran
WHILE @@FETCH_STATUS = 0
BEGIN

	insert into service_sheet_not_installed_zip_items (id_ordered_zip_item, id_service_sheet, creator_sid)
	values (@id_ordered_zip_item, @id_service_sheet, @creator_sid)

	FETCH NEXT FROM curs
	INTO @id_ordered_zip_item

	end
	COMMIT tran
	CLOSE curs
	DEALLOCATE curs
	end try
	begin catch
	rollback tran
	CLOSE curs
	DEALLOCATE curs
		THROW;  
	end catch

	
end
GO
PRINT N'Creating [dbo].[service_sheet_ordered_zip_item_get_list]...';


GO
CREATE PROCEDURE [dbo].[service_sheet_ordered_zip_item_get_list]
	@id_service_sheet int
	as begin
	set nocount on;

	select id, id_service_sheet, part_num, name, count, creator_sid, id_zip_claim_unit, dattim1 as date_create, creator_sid
	from service_sheet_ordered_zip_items
	where enabled=1 and id_service_sheet=@id_service_sheet
	end
GO
/*
Шаблон скрипта после развертывания							
--------------------------------------------------------------------------------------
 В данном файле содержатся инструкции SQL, которые будут добавлены в скрипт построения.		
 Используйте синтаксис SQLCMD для включения файла в скрипт после развертывания.			
 Пример:      :r .\myfile.sql								
 Используйте синтаксис SQLCMD для создания ссылки на переменную в скрипте после развертывания.		
 Пример:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GRANT EXECUTE ON SCHEMA ::dbo TO sqlUnit_prog
GRANT select ON SCHEMA ::dbo TO sqlUnit_prog
if not exists(select 1 from claim_states)
begin
	insert into claim_states (name, sys_name, order_num)
	values (N'Новая', N'NEW', 10)
	insert into claim_states (name, sys_name, order_num)
	values (N'Техподдержка', N'TECH', 20)
	insert into claim_states (name, sys_name, order_num)
	values (N'Назначено', N'SET', 30)
	insert into claim_states (name, sys_name, order_num)
	values (N'Выполнена', N'END', 40)
end
if not exists(select 1 from attributes)
begin

insert into attributes(sys_name, value)
values('CLSFRWAGE', '')
insert into attributes(sys_name, value)
values('CLSFROVERHEAD', '')

end
GO

GO
PRINT N'Update complete.';


GO
