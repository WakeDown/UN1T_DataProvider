/*
Deployment script for ServiceDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ServiceDb"
:setvar DefaultFilePrefix "ServiceDb"
:setvar DefaultDataPath "C:\Users\anton.rehov\AppData\Local\Microsoft\VisualStudio\SSDT\DataProvider"
:setvar DefaultLogPath "C:\Users\anton.rehov\AppData\Local\Microsoft\VisualStudio\SSDT\DataProvider"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key b83b2a2d-c137-4b7b-804a-033fe63ffad0 is skipped, element [dbo].[service_claims].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key aaf171b6-a888-4e7e-aeff-a29c64e3fc42 is skipped, element [dbo].[service_claims].[id_service_admin] (SqlSimpleColumn) will not be renamed to id_admin';


GO
PRINT N'Rename refactoring operation with key 11e3d99e-0851-4213-938e-9f8bae7069a6 is skipped, element [dbo].[service_claims].[IX_service_claims_id_amin] (SqlIndex) will not be renamed to [IX_service_claims_id_admin]';


GO
PRINT N'Rename refactoring operation with key 4f09af0f-807e-4953-bb87-a92f404ec92f is skipped, element [dbo].[service_claim_states].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 7f0686f2-d840-4408-a982-1085900f2aff is skipped, element [dbo].[claim2claim_states].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key d7b74989-299a-41a6-b637-c7d70c819e14 is skipped, element [dbo].[claim2claim_states].[id_claim_State] (SqlSimpleColumn) will not be renamed to id_claim_state';


GO
PRINT N'Rename refactoring operation with key d0410b6b-6fe0-47fd-a24a-ec207fc51201 is skipped, element [dbo].[work_types].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 176e1e30-4914-4821-b04b-6a35390814d7, aad26eca-6787-447a-867c-403603616197 is skipped, element [dbo].[classifier].[cost_fot] (SqlSimpleColumn) will not be renamed to cost_people';


GO
PRINT N'Rename refactoring operation with key a06a2380-80e3-4368-9f01-6e326d5b3a38 is skipped, element [dbo].[classifier].[id] (SqlSimpleColumn) will not be renamed to id_category';


GO
PRINT N'Rename refactoring operation with key ce76b1d5-10d2-42f1-a15c-c99d0bfe2991 is skipped, element [dbo].[classifier_categories].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Creating [dbo].[claim_states]...';


GO
CREATE TABLE [dbo].[claim_states] (
    [id]               INT           IDENTITY (1, 1) NOT NULL,
    [name]             NVARCHAR (50) NOT NULL,
    [sys_name]         NVARCHAR (20) NOT NULL,
    [order_num]        INT           NOT NULL,
    [enabled]          BIT           NOT NULL,
    [dattim1]          DATETIME      NOT NULL,
    [background_color] NVARCHAR (50) NULL,
    [foreground_color] NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[claim2claim_states]...';


GO
CREATE TABLE [dbo].[claim2claim_states] (
    [id]             BIGINT         IDENTITY (1, 1) NOT NULL,
    [id_claim]       INT            NOT NULL,
    [id_claim_state] INT            NOT NULL,
    [dattim1]        DATETIME       NOT NULL,
    [enabled]        BIT            NOT NULL,
    [creator_sid]    VARCHAR (46)   NOT NULL,
    [descr]          NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[claims]...';


GO
CREATE TABLE [dbo].[claims] (
    [id]              INT            IDENTITY (1, 1) NOT NULL,
    [sid]             VARCHAR (46)   NOT NULL,
    [id_contractor]   INT            NULL,
    [id_contract]     INT            NULL,
    [id_device]       INT            NULL,
    [contractor_name] NVARCHAR (500) NULL,
    [contract_number] NVARCHAR (150) NULL,
    [device_name]     NVARCHAR (500) NULL,
    [creator_sid]     VARCHAR (46)   NOT NULL,
    [id_admin]        INT            NULL,
    [id_engeneer]     INT            NULL,
    [dattim1]         DATETIME       NOT NULL,
    [dattim2]         DATETIME       NOT NULL,
    [enabled]         BIT            NOT NULL,
    [id_claim_state]  INT            NOT NULL,
    [deleter_sid]     VARCHAR (46)   NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[claims].[IX_service_claims_enabled]...';


GO
CREATE NONCLUSTERED INDEX [IX_service_claims_enabled]
    ON [dbo].[claims]([enabled] DESC);


GO
PRINT N'Creating [dbo].[claims].[IX_service_claims_id_admin]...';


GO
CREATE NONCLUSTERED INDEX [IX_service_claims_id_admin]
    ON [dbo].[claims]([id_admin] ASC);


GO
PRINT N'Creating [dbo].[claims].[IX_service_claims_id_engeneer]...';


GO
CREATE NONCLUSTERED INDEX [IX_service_claims_id_engeneer]
    ON [dbo].[claims]([id_engeneer] ASC);


GO
PRINT N'Creating [dbo].[classifier]...';


GO
CREATE TABLE [dbo].[classifier] (
    [id_category]  INT             IDENTITY (1, 1) NOT NULL,
    [id_work_type] INT             NOT NULL,
    [time]         INT             NOT NULL,
    [price]        DECIMAL (10, 2) NOT NULL,
    [cost_people]  DECIMAL (10, 2) NOT NULL,
    [cost_company] DECIMAL (10, 2) NOT NULL,
    [dattim1]      DATETIME        NOT NULL,
    [dattim2]      DATETIME        NOT NULL,
    [enabled]      BIT             NOT NULL,
    [creator_sid]  NVARCHAR (46)   NOT NULL,
    [id]           INT             NOT NULL,
    [id_parent]    BIT             NOT NULL,
    [name]         NVARCHAR (4000) NOT NULL,
    [number]       NVARCHAR (20)   NOT NULL,
    PRIMARY KEY CLUSTERED ([id_category] ASC)
);


GO
PRINT N'Creating [dbo].[classifier_categories]...';


GO
CREATE TABLE [dbo].[classifier_categories] (
    [id]          INT             IDENTITY (1, 1) NOT NULL,
    [id_parent]   BIT             NOT NULL,
    [name]        NVARCHAR (4000) NOT NULL,
    [number]      NVARCHAR (20)   NOT NULL,
    [descr]       NVARCHAR (MAX)  NULL,
    [dattim1]     DATETIME        NOT NULL,
    [dattim2]     DATETIME        NOT NULL,
    [enabled]     BIT             NOT NULL,
    [creator_sid] NVARCHAR (46)   NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[work_types]...';


GO
CREATE TABLE [dbo].[work_types] (
    [id]          INT             IDENTITY (1, 1) NOT NULL,
    [id_parent]   INT             NOT NULL,
    [name]        NVARCHAR (1500) NOT NULL,
    [sys_name]    NVARCHAR (20)   NULL,
    [dattim1]     DATETIME        NOT NULL,
    [dattim2]     DATETIME        NOT NULL,
    [enabled]     BIT             NOT NULL,
    [creator_sid] VARCHAR (46)    NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[claim_states]...';


GO
ALTER TABLE [dbo].[claim_states]
    ADD DEFAULT 500 FOR [order_num];


GO
PRINT N'Creating unnamed constraint on [dbo].[claim_states]...';


GO
ALTER TABLE [dbo].[claim_states]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[claim_states]...';


GO
ALTER TABLE [dbo].[claim_states]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[claim2claim_states]...';


GO
ALTER TABLE [dbo].[claim2claim_states]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[claim2claim_states]...';


GO
ALTER TABLE [dbo].[claim2claim_states]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[claims]...';


GO
ALTER TABLE [dbo].[claims]
    ADD DEFAULT newid() FOR [sid];


GO
PRINT N'Creating unnamed constraint on [dbo].[claims]...';


GO
ALTER TABLE [dbo].[claims]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[claims]...';


GO
ALTER TABLE [dbo].[claims]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[claims]...';


GO
ALTER TABLE [dbo].[claims]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 0 FOR [time];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 0 FOR [price];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 0 FOR [cost_people];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 0 FOR [cost_company];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier_categories]...';


GO
ALTER TABLE [dbo].[classifier_categories]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier_categories]...';


GO
ALTER TABLE [dbo].[classifier_categories]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier_categories]...';


GO
ALTER TABLE [dbo].[classifier_categories]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[work_types]...';


GO
ALTER TABLE [dbo].[work_types]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[work_types]...';


GO
ALTER TABLE [dbo].[work_types]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[work_types]...';


GO
ALTER TABLE [dbo].[work_types]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating [dbo].[claims_view]...';


GO
CREATE VIEW [dbo].[claims_view]
	AS SELECT  c.id, c.sid, c.id_contractor, c.id_contract, c.id_device, c.contractor_name, c.contract_number, c.device_name, c.id_admin, c.id_engeneer, c.id_claim_state
	FROM claims c where c.enabled = 1
GO
PRINT N'Creating [dbo].[close_claim]...';


GO
CREATE PROCEDURE [dbo].[close_claim]@sid varchar(46), @deleter_sid varchar(46)
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE  claims
        SET     enabled = 0, dattim2 = getdate(), deleter_sid=@deleter_sid
        WHERE   sid = @sid
    END
GO
PRINT N'Creating [dbo].[get_claim]...';


GO
CREATE PROCEDURE [dbo].[get_claim]
	@id int = null,
	@sid varchar(46) = null
	as begin
	set nocount on;
	select c.id, c.sid, c.id_contractor, c.id_contract, c.id_device, c.contractor_name, c.contract_number, c.device_name, c.id_admin, c.id_engeneer, c.id_claim_state
	from claims c
	where (@id is null or @id<= 0 or (@id is not null and @id> 0 and c.id=@id)) and
	(@sid is null or @sid= '' or (@id is not null and @sid!= '' and c.sid=@sid))
	end
GO
PRINT N'Creating [dbo].[get_claim_current_state]...';


GO
CREATE PROCEDURE [dbo].[get_claim_current_state]
	@id_claim int
	as begin
	set nocount on;
	select top 1 c2cd.id_claim, c2cd.id_claim_state, c2cd.descr, c2cd.creator_sid from claim2claim_states c2cd where c2cd.enabled=1 and c2cd.id_claim=@id_claim
	order by id desc
	end
GO
PRINT N'Creating [dbo].[get_claim_list]...';


GO
CREATE PROCEDURE [dbo].[get_claim_list]
	@id_admin int = null,
	@id_engeneer int = null,
	@date_start date = null,
	@date_end date = null,
	@top_rows int = null
	as begin
	set nocount on;

	select c.id, c.sid, c.id_contractor, c.id_contract, c.id_device, c.contractor_name, c.contract_number, c.device_name, c.id_admin, c.id_engeneer, c.id_claim_state
	from claims_view c
	order by c.id desc
	end
GO
PRINT N'Creating [dbo].[get_claim_state]...';


GO
CREATE PROCEDURE [dbo].[get_claim_state]
	@sys_name nvarchar(20) = null,
	@id int = null
	as begin set nocount on;
	select id, name ,sys_name,order_num,background_color,foreground_color
	from claim_states where enabled=1 and (@sys_name is null or @sys_name = '' or (@sys_name is not null and @sys_name != '' and sys_name= @sys_name))
	and (@id is null or @id <=0 or (@id is not null and @id >0 and id= @id))

	end
GO
PRINT N'Creating [dbo].[get_claim2claim_state_list]...';


GO
CREATE PROCEDURE [dbo].[get_claim2claim_state_list]
	@id_claim int
	as begin set nocount on;
	select c2cs.id, c2cs.id_claim, c2cs.id_claim_state, c2cs.dattim1, c2cs.creator_sid, c2cs.descr, cs.background_color, cs.foreground_color, cs.sys_name, cs.name
	from claim2claim_states c2cs
	inner join claim_states cs on c2cs.id_claim_state=cs.id
	where c2cs.enabled=1 and cs.enabled=1 and c2cs.id_claim=@id_claim
	end
GO
PRINT N'Creating [dbo].[get_classifier_list]...';


GO
CREATE PROCEDURE [dbo].[get_classifier_list]
AS
	begin
	select id, name, number, time,price,cost_company, cost_people
from dbo.classifier c
where c.enabled=1 and not exists(select 1 from classifier c2 where c2.enabled=1 and c.id=c2.id_parent)
order by id_parent, convert(int, replace(number, '.', ''))

	end
GO
PRINT N'Creating [dbo].[get_next_claim_state]...';


GO
CREATE PROCEDURE [dbo].[get_next_claim_state]
	@id_claim_state int
as begin set nocount on;
	select top 1 id, name ,sys_name,order_num,background_color,foreground_color
	from claim_states cs where enabled=1 and exists(select 1 from claim_states cs2 where cs2.enabled=1 and cs2.id=@id_claim_state and  cs.order_num > cs2.order_num)
	order by order_num
	end
GO
PRINT N'Creating [dbo].[save_claim]...';


GO
CREATE PROCEDURE [dbo].[save_claim]
	@id int = null,
	@sid varchar(46) = null,
	@id_contractor int = null,
	@id_contract int = null,
	@id_device int = null, 
	@contractor_name nvarchar(500) = null,
	@contract_number nvarchar(150) = null,
	@device_name nvarchar(500) = null,
	@creator_sid varchar(46),
	@id_admin int = null,
	@id_engeneer int = null
	--,	@id_claim_state int= null -- статус меняем отдельной процедурой
	as begin
	set nocount on;
	if (@id is not null and @id > 0 and exists(select 1 from claims where id=@id))
	begin
		update claims
		set creator_sid=@creator_sid,id_admin=@id_admin, id_engeneer=@id_engeneer
		--id_contractor = @id_contractor,id_contract=@id_contract,id_device=@id_device, contractor_name=@contractor_name, contract_number=@contract_number, device_name=@device_name, id_claim_state=@id_claim_state
		where id=@id
	end
	else if (@sid is not null and @sid <> '' and exists(select 1 from claims where sid=@sid))
	begin
		update claims
		set creator_sid=@creator_sid,id_admin=@id_admin, id_engeneer=@id_engeneer
		--id_contractor = @id_contractor,id_contract=@id_contract,id_device=@id_device, contractor_name=@contractor_name, contract_number=@contract_number, device_name=@device_name, id_claim_state=@id_claim_state
		where sid=@sid
	end
	else
	begin
	insert into claims(id_contractor, id_contract, id_device, contractor_name, contract_number, device_name, creator_sid, id_admin, id_engeneer, id_claim_state)
	values(@id_contractor, @id_contract, @id_device, @contractor_name, @contract_number, @device_name, @creator_sid, @id_admin, @id_engeneer, 0)
		set @id = @@IDENTITY
	end
	select @id as id
	end
GO
PRINT N'Creating [dbo].[save_claim2claim_state]...';


GO
CREATE PROCEDURE [dbo].[save_claim2claim_state]
	@id_claim int,
	@id_claim_state int,
	@creator_sid varchar(46),
	@descr nvarchar(max)
	as begin set nocount on;
	declare @id int
	insert into claim2claim_states(id_claim, id_claim_state, creator_sid, descr)
	values (@id_claim, @id_claim_state, @creator_sid, @descr)	
	set @id = @@IDENTITY
	select @id as id
	end
GO
PRINT N'Creating [dbo].[set_claim_claim_state]...';


GO
CREATE PROCEDURE [dbo].[set_claim_claim_state]
	@id int = null,
	@sid varchar(46) = null,
	@id_claim_state int
AS
begin
set nocount on;
if @id is not null and @id > 0
begin
update claims
set id_claim_state=@id_claim_state
where id=@id end 
else if @sid is not null and @sid <> ''
begin
	update claims
set id_claim_state=@id_claim_state
where sid=@sid 
end
end
GO
PRINT N'Creating [dbo].[set_claim_current_state]...';


GO
CREATE PROCEDURE [dbo].[set_claim_current_state]
	@id_claim int,
	@id_claim_state int
	as begin set nocount on;
		update claims
		set id_claim_state = @id_claim_state where id=@id_claim
	end
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b83b2a2d-c137-4b7b-804a-033fe63ffad0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b83b2a2d-c137-4b7b-804a-033fe63ffad0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'aaf171b6-a888-4e7e-aeff-a29c64e3fc42')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('aaf171b6-a888-4e7e-aeff-a29c64e3fc42')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '11e3d99e-0851-4213-938e-9f8bae7069a6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('11e3d99e-0851-4213-938e-9f8bae7069a6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4f09af0f-807e-4953-bb87-a92f404ec92f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4f09af0f-807e-4953-bb87-a92f404ec92f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7f0686f2-d840-4408-a982-1085900f2aff')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7f0686f2-d840-4408-a982-1085900f2aff')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd7b74989-299a-41a6-b637-c7d70c819e14')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d7b74989-299a-41a6-b637-c7d70c819e14')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c53a6450-31f9-456e-8e8d-1e5152581f2a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c53a6450-31f9-456e-8e8d-1e5152581f2a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '63b3a29e-4704-48fd-a06c-9cde85517d34')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('63b3a29e-4704-48fd-a06c-9cde85517d34')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd0410b6b-6fe0-47fd-a24a-ec207fc51201')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d0410b6b-6fe0-47fd-a24a-ec207fc51201')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '176e1e30-4914-4821-b04b-6a35390814d7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('176e1e30-4914-4821-b04b-6a35390814d7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'aad26eca-6787-447a-867c-403603616197')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('aad26eca-6787-447a-867c-403603616197')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e7cfdf59-cda9-4738-8887-6fce4a266726')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e7cfdf59-cda9-4738-8887-6fce4a266726')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a06a2380-80e3-4368-9f01-6e326d5b3a38')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a06a2380-80e3-4368-9f01-6e326d5b3a38')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ce76b1d5-10d2-42f1-a15c-c99d0bfe2991')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ce76b1d5-10d2-42f1-a15c-c99d0bfe2991')

GO

GO
/*
Шаблон скрипта после развертывания							
--------------------------------------------------------------------------------------
 В данном файле содержатся инструкции SQL, которые будут добавлены в скрипт построения.		
 Используйте синтаксис SQLCMD для включения файла в скрипт после развертывания.			
 Пример:      :r .\myfile.sql								
 Используйте синтаксис SQLCMD для создания ссылки на переменную в скрипте после развертывания.		
 Пример:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GRANT EXECUTE ON SCHEMA ::dbo TO sqlUnit_prog
if not exists(select 1 from claim_states)
begin
	insert into claim_states (name, sys_name, order_num)
	values (N'Новая', N'NEW', 10)
	insert into claim_states (name, sys_name, order_num)
	values (N'Техподдержка', N'TECH', 20)
	insert into claim_states (name, sys_name, order_num)
	values (N'Назначено', N'SET', 30)
	insert into claim_states (name, sys_name, order_num)
	values (N'Выполнена', N'END', 40)
end
GO

GO
PRINT N'Update complete.';


GO
