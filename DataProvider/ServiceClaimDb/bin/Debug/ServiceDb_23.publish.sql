/*
Deployment script for Service

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Service"
:setvar DefaultFilePrefix "Service"
:setvar DefaultDataPath "E:\mssql\"
:setvar DefaultLogPath "E:\mssql\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key c53a6450-31f9-456e-8e8d-1e5152581f2a, 63b3a29e-4704-48fd-a06c-9cde85517d34 is skipped, element [dbo].[classifier].[Id] (SqlSimpleColumn) will not be renamed to id_category';


GO
PRINT N'Rename refactoring operation with key d0410b6b-6fe0-47fd-a24a-ec207fc51201 is skipped, element [dbo].[work_types].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 176e1e30-4914-4821-b04b-6a35390814d7, aad26eca-6787-447a-867c-403603616197 is skipped, element [dbo].[classifier].[cost_fot] (SqlSimpleColumn) will not be renamed to cost_people';


GO
PRINT N'Creating [dbo].[classifier]...';


GO
CREATE TABLE [dbo].[classifier] (
    [id_category]  INT             IDENTITY (1, 1) NOT NULL,
    [id_parent]    INT             NOT NULL,
    [name]         NVARCHAR (4000) NOT NULL,
    [number]       NVARCHAR (20)   NOT NULL,
    [dattim1]      DATETIME        NOT NULL,
    [dattim2]      DATETIME        NOT NULL,
    [enabled]      BIT             NOT NULL,
    [creator_sid]  NVARCHAR (46)   NOT NULL,
    [id_work_type] INT             NOT NULL,
    [time]         INT             NOT NULL,
    [price]        DECIMAL (10, 2) NOT NULL,
    [cost_people]  DECIMAL (10, 2) NOT NULL,
    [cost_company] DECIMAL (10, 2) NOT NULL,
    [descr]        NVARCHAR (MAX)  NULL,
    PRIMARY KEY CLUSTERED ([id_category] ASC)
);


GO
PRINT N'Creating [dbo].[work_types]...';


GO
CREATE TABLE [dbo].[work_types] (
    [id]          INT             IDENTITY (1, 1) NOT NULL,
    [id_parent]   INT             NOT NULL,
    [name]        NVARCHAR (1500) NOT NULL,
    [sys_name]    NVARCHAR (20)   NULL,
    [dattim1]     DATETIME        NOT NULL,
    [dattim2]     DATETIME        NOT NULL,
    [enabled]     BIT             NOT NULL,
    [creator_sid] VARCHAR (46)    NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 0 FOR [id_parent];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 0 FOR [time];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 0 FOR [price];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 0 FOR [cost_people];


GO
PRINT N'Creating unnamed constraint on [dbo].[classifier]...';


GO
ALTER TABLE [dbo].[classifier]
    ADD DEFAULT 0 FOR [cost_company];


GO
PRINT N'Creating unnamed constraint on [dbo].[work_types]...';


GO
ALTER TABLE [dbo].[work_types]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[work_types]...';


GO
ALTER TABLE [dbo].[work_types]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[work_types]...';


GO
ALTER TABLE [dbo].[work_types]
    ADD DEFAULT 1 FOR [enabled];


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c53a6450-31f9-456e-8e8d-1e5152581f2a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c53a6450-31f9-456e-8e8d-1e5152581f2a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '63b3a29e-4704-48fd-a06c-9cde85517d34')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('63b3a29e-4704-48fd-a06c-9cde85517d34')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd0410b6b-6fe0-47fd-a24a-ec207fc51201')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d0410b6b-6fe0-47fd-a24a-ec207fc51201')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '176e1e30-4914-4821-b04b-6a35390814d7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('176e1e30-4914-4821-b04b-6a35390814d7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'aad26eca-6787-447a-867c-403603616197')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('aad26eca-6787-447a-867c-403603616197')

GO

GO
/*
Шаблон скрипта после развертывания							
--------------------------------------------------------------------------------------
 В данном файле содержатся инструкции SQL, которые будут добавлены в скрипт построения.		
 Используйте синтаксис SQLCMD для включения файла в скрипт после развертывания.			
 Пример:      :r .\myfile.sql								
 Используйте синтаксис SQLCMD для создания ссылки на переменную в скрипте после развертывания.		
 Пример:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GRANT EXECUTE ON SCHEMA ::dbo TO sqlUnit_prog
if not exists(select 1 from claim_states)
begin
	insert into claim_states (name, sys_name, order_num)
	values (N'Новая', N'NEW', 10)
	insert into claim_states (name, sys_name, order_num)
	values (N'Техподдержка', N'TECH', 20)
	insert into claim_states (name, sys_name, order_num)
	values (N'Назначено', N'SET', 30)
	insert into claim_states (name, sys_name, order_num)
	values (N'Выполнена', N'END', 40)
end
GO

GO
PRINT N'Update complete.';


GO
