/*
Deployment script for Service

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Service"
:setvar DefaultFilePrefix "Service"
:setvar DefaultDataPath "E:\mssql\"
:setvar DefaultLogPath "E:\mssql\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping unnamed constraint on [dbo].[classifier_categories]...';


GO
ALTER TABLE [dbo].[classifier_categories] DROP CONSTRAINT [DF__classifie__datti__4D94879B];


GO
PRINT N'Dropping unnamed constraint on [dbo].[classifier_categories]...';


GO
ALTER TABLE [dbo].[classifier_categories] DROP CONSTRAINT [DF__classifie__datti__4E88ABD4];


GO
PRINT N'Dropping unnamed constraint on [dbo].[classifier_categories]...';


GO
ALTER TABLE [dbo].[classifier_categories] DROP CONSTRAINT [DF__classifie__enabl__4F7CD00D];


GO
PRINT N'Dropping unnamed constraint on [dbo].[classifier_categories]...';


GO
ALTER TABLE [dbo].[classifier_categories] DROP CONSTRAINT [DF__classifie__creat__5070F446];


GO
PRINT N'Starting rebuilding table [dbo].[classifier_categories]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_classifier_categories] (
    [id]          INT             IDENTITY (1, 1) NOT NULL,
    [id_parent]   INT             NOT NULL,
    [name]        NVARCHAR (4000) NOT NULL,
    [number]      NVARCHAR (20)   NOT NULL,
    [complexity]  INT             NULL,
    [descr]       NVARCHAR (MAX)  NULL,
    [dattim1]     DATETIME        DEFAULT getdate() NOT NULL,
    [dattim2]     DATETIME        DEFAULT '3.3.3333' NOT NULL,
    [enabled]     BIT             DEFAULT 1 NOT NULL,
    [creator_sid] NVARCHAR (46)   DEFAULT '' NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[classifier_categories])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_classifier_categories] ON;
        INSERT INTO [dbo].[tmp_ms_xx_classifier_categories] ([id], [id_parent], [name], [number], [descr], [dattim1], [dattim2], [enabled], [creator_sid])
        SELECT   [id],
                 [id_parent],
                 [name],
                 [number],
                 [descr],
                 [dattim1],
                 [dattim2],
                 [enabled],
                 [creator_sid]
        FROM     [dbo].[classifier_categories]
        ORDER BY [id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_classifier_categories] OFF;
    END

DROP TABLE [dbo].[classifier_categories];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_classifier_categories]', N'classifier_categories';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[save_classifier_category]...';


GO
ALTER PROCEDURE [dbo].[save_classifier_category]
@id int = null,
@id_parent int = 0,
	@name nvarchar(4000) = '',
	@number nvarchar(20) = '',
	@descr nvarchar(max) = null,
    @complexity INT  = NULL,
	@creator_sid varchar(46)
	as begin
	set nocount on;

		if (@id is not null and @id > 0 and exists(select 1 from classifier_categories where id=@id))
		begin
			update classifier_categories
			set 
			--id_parent=@id_parent, 
			name=@name, number=@number, complexity=@complexity
			--,descr=@descr
			where id=@id			
		end 
		else if (@number is not null and @number != '' and exists(select 1 from classifier_categories where enabled = 1 and number=@number))
		begin
			select top 1 @id = id from classifier_categories where enabled = 1 and number=@number order by id desc

			update classifier_categories
			set 
			--id_parent=@id_parent, 
			name=@name, number=@number, complexity=@complexity
			--,descr=@descr
			where id=@id
		end
		else
		begin
			insert into classifier_categories (id_parent,name, number, descr,complexity, creator_sid)
			values (@id_parent,@name, @number, @descr, @complexity, @creator_sid)
			set @id = @@IDENTITY
		end

		select @id as id
	end
GO
PRINT N'Refreshing [dbo].[get_classifier_category]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_classifier_category]';


GO
/*
Шаблон скрипта после развертывания							
--------------------------------------------------------------------------------------
 В данном файле содержатся инструкции SQL, которые будут добавлены в скрипт построения.		
 Используйте синтаксис SQLCMD для включения файла в скрипт после развертывания.			
 Пример:      :r .\myfile.sql								
 Используйте синтаксис SQLCMD для создания ссылки на переменную в скрипте после развертывания.		
 Пример:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GRANT EXECUTE ON SCHEMA ::dbo TO sqlUnit_prog
if not exists(select 1 from claim_states)
begin
	insert into claim_states (name, sys_name, order_num)
	values (N'Новая', N'NEW', 10)
	insert into claim_states (name, sys_name, order_num)
	values (N'Техподдержка', N'TECH', 20)
	insert into claim_states (name, sys_name, order_num)
	values (N'Назначено', N'SET', 30)
	insert into claim_states (name, sys_name, order_num)
	values (N'Выполнена', N'END', 40)
end
GO

GO
PRINT N'Update complete.';


GO
