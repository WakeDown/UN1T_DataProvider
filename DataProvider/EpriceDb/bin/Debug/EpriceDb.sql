/*
Deployment script for EpriceDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "EpriceDb"
:setvar DefaultFilePrefix "EpriceDb"
:setvar DefaultDataPath "C:\Users\anton.rehov\AppData\Local\Microsoft\VisualStudio\SSDT\DataProvider"
:setvar DefaultLogPath "C:\Users\anton.rehov\AppData\Local\Microsoft\VisualStudio\SSDT\DataProvider"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key f9c2a76e-9d03-43af-9ba4-971ec36a4920 is skipped, element [dbo].[catalog_pivot].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key fa1fa576-5f45-415c-8c87-a72a0982f816 is skipped, element [dbo].[catalog_positions].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key ccb7d34a-49d1-4a8c-a19d-8fffc4dfd12c is skipped, element [dbo].[catalog_positions].[provider_category_id] (SqlSimpleColumn) will not be renamed to provider_id_category';


GO
PRINT N'Rename refactoring operation with key 1474fd18-4788-404f-b402-896405f0a5c3, bb963e50-7bd0-4667-8643-521bb7b7d4ae is skipped, element [dbo].[catalog_pivot].[provider_id] (SqlSimpleColumn) will not be renamed to id_category';


GO
PRINT N'Rename refactoring operation with key 36866aff-012a-4e5b-974d-fa0c8f137267, 4ae02fb4-4068-45a5-852d-4113190de9ea, 951d23d1-bd4c-42df-824f-22b774c6c44f is skipped, element [dbo].[catalog_pivot].[provider_parent_id] (SqlSimpleColumn) will not be renamed to id_parent_category';


GO
PRINT N'Rename refactoring operation with key 87681331-683a-4cf7-8024-fff398a6b2fe is skipped, element [dbo].[catalog_positions].[currency] (SqlSimpleColumn) will not be renamed to id_currency';


GO
PRINT N'Rename refactoring operation with key 707e136b-4801-4ed5-b7eb-a23528dd6449 is skipped, element [dbo].[product_providers].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 06dc8b37-d21b-4408-9ae6-693e59877209, f73ff595-5ba3-4529-bd8e-46f0a845d8e9 is skipped, element [dbo].[catalog_products].[id_position] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 35bc6fa0-c303-4a8a-99d6-e1fe416bd464 is skipped, element [dbo].[catalog_products].[cat_sid] (SqlSimpleColumn) will not be renamed to sid_cat';


GO
PRINT N'Creating [dbo].[catalog_categories]...';


GO
CREATE TABLE [dbo].[catalog_categories] (
    [id_provider] INT            NOT NULL,
    [name]        NVARCHAR (500) NOT NULL,
    [id]          NVARCHAR (50)  NOT NULL,
    [id_parent]   NVARCHAR (50)  NOT NULL,
    [dattim1]     DATETIME       NOT NULL,
    [enabled]     BIT            NOT NULL,
    [sid]         BIGINT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_catalog_categories] PRIMARY KEY CLUSTERED ([sid] ASC)
);


GO
PRINT N'Creating [dbo].[catalog_categories].[IX_catalog_categories_enabled]...';


GO
CREATE NONCLUSTERED INDEX [IX_catalog_categories_enabled]
    ON [dbo].[catalog_categories]([enabled] DESC);


GO
PRINT N'Creating [dbo].[catalog_categories].[IX_catalog_categories_id_provider]...';


GO
CREATE NONCLUSTERED INDEX [IX_catalog_categories_id_provider]
    ON [dbo].[catalog_categories]([id_provider] ASC);


GO
PRINT N'Creating [dbo].[catalog_products]...';


GO
CREATE TABLE [dbo].[catalog_products] (
    [name]         NVARCHAR (MAX)  NOT NULL,
    [price]        DECIMAL (10, 2) NOT NULL,
    [id_currency]  INT             NOT NULL,
    [dattim1]      DATETIME        NOT NULL,
    [enabled]      BIT             NOT NULL,
    [part_number]  NVARCHAR (50)   NOT NULL,
    [id]           NVARCHAR (50)   NOT NULL,
    [sid]          BIGINT          IDENTITY (1, 1) NOT NULL,
    [sid_cat]      BIGINT          NOT NULL,
    [vendor]       NVARCHAR (500)  NOT NULL,
    [currency_str] NVARCHAR (20)   NOT NULL,
    CONSTRAINT [PK_catalog_products] PRIMARY KEY CLUSTERED ([sid] ASC)
);


GO
PRINT N'Creating [dbo].[Product]...';


GO
CREATE TABLE [dbo].[Product] (
    [Id]         INT             IDENTITY (1, 1) NOT NULL,
    [IdCategory] INT             NOT NULL,
    [Name]       NVARCHAR (1000) NOT NULL,
    [Vendor]     NVARCHAR (200)  NULL,
    [Brand]      NVARCHAR (200)  NULL,
    [PartNumber] NVARCHAR (100)  NOT NULL,
    [Provider]   INT             NOT NULL,
    [RecordDate] DATETIME2 (7)   NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[product_providers]...';


GO
CREATE TABLE [dbo].[product_providers] (
    [id]       INT           NOT NULL,
    [name]     NVARCHAR (50) NOT NULL,
    [sys_name] NVARCHAR (20) NOT NULL,
    [enabled]  BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[ProductProperty]...';


GO
CREATE TABLE [dbo].[ProductProperty] (
    [IdProduct]              INT            NOT NULL,
    [Provider]               INT            NOT NULL,
    [IdPropertyProvider]     VARCHAR (100)  NOT NULL,
    [IdPropertyProviderType] INT            NOT NULL,
    [Name]                   NVARCHAR (200) NOT NULL,
    [Value]                  NVARCHAR (500) NOT NULL
);


GO
PRINT N'Creating [dbo].[ProviderCategory]...';


GO
CREATE TABLE [dbo].[ProviderCategory] (
    [Id]             NVARCHAR (100) NOT NULL,
    [IdType]         INT            NOT NULL,
    [IdParent]       NVARCHAR (100) NOT NULL,
    [IdParentType]   INT            NOT NULL,
    [Provider]       INT            NOT NULL,
    [IdUN1TCategory] INT            NOT NULL
);


GO
PRINT N'Creating [dbo].[Stock]...';


GO
CREATE TABLE [dbo].[Stock] (
    [IdProduct]  INT             NOT NULL,
    [Currency]   INT             NOT NULL,
    [Location]   INT             NOT NULL,
    [Value]      INT             NOT NULL,
    [Price]      DECIMAL (18, 2) NOT NULL,
    [Provider]   INT             NOT NULL,
    [RecordDate] DATETIME2 (7)   NOT NULL
);


GO
PRINT N'Creating [dbo].[UN1TCategory]...';


GO
CREATE TABLE [dbo].[UN1TCategory] (
    [Id]       INT            NOT NULL,
    [IdParent] INT            NOT NULL,
    [NAME]     NVARCHAR (250) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[catalog_categories]...';


GO
ALTER TABLE [dbo].[catalog_categories]
    ADD DEFAULT '' FOR [id_parent];


GO
PRINT N'Creating unnamed constraint on [dbo].[catalog_categories]...';


GO
ALTER TABLE [dbo].[catalog_categories]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[catalog_categories]...';


GO
ALTER TABLE [dbo].[catalog_categories]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[catalog_products]...';


GO
ALTER TABLE [dbo].[catalog_products]
    ADD DEFAULT 0 FOR [price];


GO
PRINT N'Creating unnamed constraint on [dbo].[catalog_products]...';


GO
ALTER TABLE [dbo].[catalog_products]
    ADD DEFAULT 1 FOR [id_currency];


GO
PRINT N'Creating unnamed constraint on [dbo].[catalog_products]...';


GO
ALTER TABLE [dbo].[catalog_products]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[catalog_products]...';


GO
ALTER TABLE [dbo].[catalog_products]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[catalog_products]...';


GO
ALTER TABLE [dbo].[catalog_products]
    ADD DEFAULT '' FOR [part_number];


GO
PRINT N'Creating unnamed constraint on [dbo].[product_providers]...';


GO
ALTER TABLE [dbo].[product_providers]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating [dbo].[FK_Product_UN1TCategory]...';


GO
ALTER TABLE [dbo].[Product] WITH NOCHECK
    ADD CONSTRAINT [FK_Product_UN1TCategory] FOREIGN KEY ([IdCategory]) REFERENCES [dbo].[UN1TCategory] ([Id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ProductProperty_Product]...';


GO
ALTER TABLE [dbo].[ProductProperty] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductProperty_Product] FOREIGN KEY ([IdProduct]) REFERENCES [dbo].[Product] ([Id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ProviderCategory_UN1TCategory]...';


GO
ALTER TABLE [dbo].[ProviderCategory] WITH NOCHECK
    ADD CONSTRAINT [FK_ProviderCategory_UN1TCategory] FOREIGN KEY ([IdUN1TCategory]) REFERENCES [dbo].[UN1TCategory] ([Id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Stock_Product]...';


GO
ALTER TABLE [dbo].[Stock] WITH NOCHECK
    ADD CONSTRAINT [FK_Stock_Product] FOREIGN KEY ([IdProduct]) REFERENCES [dbo].[Product] ([Id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[CreateProduct]...';


GO
CREATE PROCEDURE CreateProduct
(
	@idCategory int,
	@name nvarchar(1000),
	@vendor nvarchar(200), 
	@brand nvarchar(200),
	@partNumber nvarchar(100),
  @provider int,
  @recordDate datetime2(7)
)
AS
DECLARE @return int;
DECLARE @count int;
SET @count = (SELECT COUNT(*) FROM Product WHERE PartNumber = @partNumber);
IF @count = 0
BEGIN
	SET @return = 1;
	INSERT INTO Product VALUES(@idCategory, @name, @vendor, @brand, @partNumber, @provider, @recordDate)
END 
IF @count != 0
BEGIN
	SET @return = 0;
	IF @brand IS NOT NULL
	BEGIN
		DECLARE @currentBrand nvarchar(200);
		SET @currentBrand = (SELECT Brand FROM Product WHERE PartNumber = @partNumber);
		IF @currentBrand IS NULL
		BEGIN
			UPDATE Product SET Brand = @brand WHERE PartNumber = @partNumber
		END
	END
	IF @vendor IS NOT NULL
	BEGIN
		DECLARE @currentVendor nvarchar(200);
		SET @currentVendor = (SELECT Vendor FROM Product WHERE PartNumber = @partNumber);
		IF @currentVendor IS NULL
		BEGIN
			UPDATE Product SET Vendor = @vendor WHERE PartNumber = @partNumber
		END
	END
END
SELECT @return
GO
PRINT N'Creating [dbo].[CreateProviderCategory]...';


GO
CREATE PROCEDURE CreateProviderCategory
(
	@id nvarchar(100),
	@idType int,
	@idParent nvarchar(100),
	@idParentType int,
	@provider int,
	@idUN1TCategory int
)
AS 
INSERT INTO ProviderCategory VALUES(@id, @idType, @idParent, @idParentType, @provider, @idUN1TCategory)
GO
PRINT N'Creating [dbo].[CreateUN1TCategory]...';


GO
CREATE PROCEDURE CreateUN1TCategory 
(
	@id int,
	@idParent int,
	@name nvarchar(250)
)
AS 
INSERT INTO UN1TCategory VALUES(@id, @idParent, @name)
GO
PRINT N'Creating [dbo].[DeleteAllProviderCategories]...';


GO
CREATE PROCEDURE DeleteAllProviderCategories
AS 
DELETE FROM ProviderCategory
GO
PRINT N'Creating [dbo].[DeleteProvidersCategories]...';


GO
CREATE PROCEDURE DeleteProvidersCategories
(
	@provider int
)
AS 
DELETE FROM ProviderCategory WHERE Provider = @provider
GO
PRINT N'Creating [dbo].[DeleteStocksForProvider]...';


GO
CREATE PROCEDURE DeleteStocksForProvider
(
	@provider int
)
AS
DELETE FROM Stock WHERE Provider = @provider
GO
PRINT N'Creating [dbo].[DeleteUN1TCategory]...';


GO
CREATE PROCEDURE DeleteUN1TCategory
(
	@id int
)
AS 
DELETE FROM UN1TCategory WHERE Id = @id
GO
PRINT N'Creating [dbo].[get_prod_provider]...';


GO
CREATE PROCEDURE [dbo].[get_prod_provider]
    @id INT = NULL ,
    @sys_name NVARCHAR(20) = NULL
AS
    BEGIN
        SET nocount ON;
        SELECT  id ,
                name ,
                sys_name
        FROM    product_providers p
        WHERE   enabled = 1
                AND ( ( @id IS NOT NULL
                        AND @id > 0
                        AND p.id = @id
                      )
                      OR @id IS NULL
                      OR @id <= 0
                    )
                AND ( ( @sys_name IS NOT NULL
                        AND @sys_name <> ''
                        AND p.sys_name = @sys_name
                      )
                      OR @sys_name IS NULL
                      OR @sys_name = ''
                    )

    END
GO
PRINT N'Creating [dbo].[LoadAllUN1TCategory]...';


GO
CREATE PROCEDURE LoadAllUN1TCategory
AS 
SELECT *, (SELECT COUNT(*) FROM ProviderCategory WHERE IdUN1TCategory = UN1TCategory.Id) FROM UN1TCategory
GO
PRINT N'Creating [dbo].[LoadProductsForCategory]...';


GO
CREATE PROCEDURE LoadProductsForCategory
(
	@idCategory int
)
AS
SELECT * FROM Product WHERE IdCategory = @idCategory
GO
PRINT N'Creating [dbo].[LoadProviderCategories]...';


GO
CREATE PROCEDURE LoadProviderCategories
(
	@provider int
)
AS 
SELECT * FROM ProviderCategory WHERE Provider = @provider;
GO
PRINT N'Creating [dbo].[LoadStocksForProducts]...';


GO
CREATE PROCEDURE LoadStocksForProducts
(
	@categoryId int
)
AS
SELECT * FROM Stock WHERE IdProduct IN (SELECT Id FROM Product WHERE IdCategory = @categoryId)
GO
PRINT N'Creating [dbo].[save_catalog_category]...';


GO
CREATE PROCEDURE [dbo].[save_catalog_category]
@sid bigint = null,
	@id nvarchar(50),
	@id_parent nvarchar(50) = '',
	@name nvarchar(500),
	@id_provider int
AS
BEGIN 
SET NOCOUNT ON;
IF not EXISTS(SELECT 1 FROM catalog_categories c where c.enabled=1 and c.id=@id and c.id_provider=@id_provider)
begin
	insert into catalog_categories (id_provider, id, id_parent, name)
	values (@id_provider, @id, @id_parent, @name)
	set  @sid = @@IDENTITY
end
else
begin
	SELECT @sid = c.sid FROM catalog_categories c where c.enabled=1 and c.id=@id and c.id_provider=@id_provider
end

select @sid as sid
end
GO
PRINT N'Creating [dbo].[save_catalog_product]...';


GO
CREATE PROCEDURE [dbo].[save_catalog_product]
@sid bigint = null,
	@id nvarchar(50),
	@sid_cat bigint,
	@name nvarchar(MAX),
	@price decimal(10, 2),
	@id_currency int,
	@part_number nvarchar(50),
	@vendor nvarchar(500) = null,
	@currency_str nvarchar(20) = null
AS
BEGIN 
SET NOCOUNT ON;
IF not EXISTS(SELECT 1 FROM catalog_products p where p.enabled=1 and p.id=@id and p.sid_cat=@sid_cat)
begin
	insert into catalog_products (sid_cat,name, price, id_currency, part_number, id, vendor, currency_str)
	values (@sid_cat, @name, @price, @id_currency, @part_number, @id, @vendor, @currency_str)
	set  @sid = @@IDENTITY
end
else
begin
	if not exists(SELECT 1 FROM catalog_products p where p.enabled=1 and p.id=@id and p.sid_cat=@sid_cat and p.price=@price and p.id_currency = @id_currency)
	begin
		update catalog_products
		set price=@price, id_currency = @id_currency, part_number=@part_number, currency_str=@currency_str
		where enabled=1 and id=@id and sid_cat=@sid_cat
		select @sid = sid from catalog_products where enabled=1 and id=@id and sid_cat=@sid_cat
	end
end

select @sid as sid
end
GO
PRINT N'Creating [dbo].[SaveProductProperty]...';


GO
CREATE PROCEDURE SaveProductProperty
(
	@partNumber nvarchar(100),
	@provider int,
	@idPropertyProvider varchar(100),
	@idPropertyProviderType int,
	@name nvarchar(200),
	@value nvarchar(500)
)
AS
DECLARE @id int;
SET @id = (SELECT Id FROM Product WHERE PartNumber = @partNumber);
IF @id IS NOT NULL
BEGIN
	DECLARE @count int;
	SET @count = (SELECT COUNT(*) FROM ProductProperty WHERE IdProduct = @id AND Provider = @provider AND IdPropertyProvider = @idPropertyProvider);
	IF @count = 0
	BEGIN
		INSERT INTO ProductProperty VALUES(@id, @provider, @idPropertyProvider, @idPropertyProviderType, @name, @value)
	END
END
GO
PRINT N'Creating [dbo].[SaveStock]...';


GO
CREATE PROCEDURE SaveStock
(
	@partNumber nvarchar(100),
	@currency int,
	@location int,
	@value int,
	@price decimal(18,2),
	@provider int,
  @recordDate datetime2(7)
)
AS
DECLARE @id int;
SET @id = (SELECT Id FROM Product WHERE PartNumber = @partNumber);
IF @id IS NOT NULL
BEGIN
	INSERT INTO Stock VALUES(@id, @currency, @location, @value, @price, @provider, @recordDate)
END
GO
PRINT N'Creating [dbo].[UpdateUN1TCategory]...';


GO
CREATE PROCEDURE UpdateUN1TCategory
(
	@id int,
	@name nvarchar(250)
)
AS 
UPDATE UN1TCategory SET Name = @name WHERE Id = @id
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f9c2a76e-9d03-43af-9ba4-971ec36a4920')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f9c2a76e-9d03-43af-9ba4-971ec36a4920')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fa1fa576-5f45-415c-8c87-a72a0982f816')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fa1fa576-5f45-415c-8c87-a72a0982f816')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ccb7d34a-49d1-4a8c-a19d-8fffc4dfd12c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ccb7d34a-49d1-4a8c-a19d-8fffc4dfd12c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1474fd18-4788-404f-b402-896405f0a5c3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1474fd18-4788-404f-b402-896405f0a5c3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '36866aff-012a-4e5b-974d-fa0c8f137267')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('36866aff-012a-4e5b-974d-fa0c8f137267')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bb963e50-7bd0-4667-8643-521bb7b7d4ae')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bb963e50-7bd0-4667-8643-521bb7b7d4ae')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4ae02fb4-4068-45a5-852d-4113190de9ea')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4ae02fb4-4068-45a5-852d-4113190de9ea')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '951d23d1-bd4c-42df-824f-22b774c6c44f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('951d23d1-bd4c-42df-824f-22b774c6c44f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '87681331-683a-4cf7-8024-fff398a6b2fe')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('87681331-683a-4cf7-8024-fff398a6b2fe')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '707e136b-4801-4ed5-b7eb-a23528dd6449')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('707e136b-4801-4ed5-b7eb-a23528dd6449')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '06dc8b37-d21b-4408-9ae6-693e59877209')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('06dc8b37-d21b-4408-9ae6-693e59877209')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f73ff595-5ba3-4529-bd8e-46f0a845d8e9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f73ff595-5ba3-4529-bd8e-46f0a845d8e9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '35bc6fa0-c303-4a8a-99d6-e1fe416bd464')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('35bc6fa0-c303-4a8a-99d6-e1fe416bd464')

GO

GO
/*
Шаблон скрипта после развертывания							
--------------------------------------------------------------------------------------
 В данном файле содержатся инструкции SQL, которые будут добавлены в скрипт построения.		
 Используйте синтаксис SQLCMD для включения файла в скрипт после развертывания.			
 Пример:      :r .\myfile.sql								
 Используйте синтаксис SQLCMD для создания ссылки на переменную в скрипте после развертывания.		
 Пример:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GRANT EXECUTE ON SCHEMA ::dbo TO sqlUnit_prog
DELETE product_providers

insert into product_providers (id, name, sys_name)
values (1, N'Treolan', N'TREOLAN')

insert into product_providers (id, name, sys_name)
values (2, N'Merlion', N'MERLION')

insert into product_providers (id, name, sys_name)
values (3, N'OCS', N'OCS')

insert into product_providers (id, name, sys_name)
values (4, N'Oldi', N'OLDI')
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Product] WITH CHECK CHECK CONSTRAINT [FK_Product_UN1TCategory];

ALTER TABLE [dbo].[ProductProperty] WITH CHECK CHECK CONSTRAINT [FK_ProductProperty_Product];

ALTER TABLE [dbo].[ProviderCategory] WITH CHECK CHECK CONSTRAINT [FK_ProviderCategory_UN1TCategory];

ALTER TABLE [dbo].[Stock] WITH CHECK CHECK CONSTRAINT [FK_Stock_Product];


GO
PRINT N'Update complete.';


GO
