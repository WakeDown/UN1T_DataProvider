/*
Deployment script for Stuff

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Stuff"
:setvar DefaultFilePrefix "Stuff"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'The following operation was generated from a refactoring log file ac0d019b-3346-4300-a96e-cb6766d554c5';

PRINT N'Rename [dbo].[employees].[full_name_vin] to full_name_rod';


GO
EXECUTE sp_rename @objname = N'[dbo].[employees].[full_name_vin]', @newname = N'full_name_rod', @objtype = N'COLUMN';


GO
PRINT N'Altering [dbo].[organizations]...';


GO
ALTER TABLE [dbo].[organizations] ALTER COLUMN [name] NVARCHAR (150) NOT NULL;


GO
ALTER TABLE [dbo].[organizations]
    ADD [sys_name] NVARCHAR (50) NULL;


GO
PRINT N'Altering [dbo].[positions]...';


GO
ALTER TABLE [dbo].[positions]
    ADD [name_dat] NVARCHAR (500) NULL;


GO
PRINT N'Creating [dbo].[document_meet_links]...';


GO
CREATE TABLE [dbo].[document_meet_links] (
    [id]            INT          IDENTITY (1, 1) NOT NULL,
    [id_document]   INT          NOT NULL,
    [id_department] INT          NULL,
    [id_position]   INT          NULL,
    [id_employee]   INT          NULL,
    [dattim1]       DATETIME     NOT NULL,
    [creator_sid]   VARCHAR (46) NOT NULL,
    [enabled]       BIT          NOT NULL,
    [dattim2]       DATETIME     NOT NULL,
    [deleter_sid]   VARCHAR (46) NULL,
    CONSTRAINT [PK_document_links] PRIMARY KEY CLUSTERED ([id] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[document_meets]...';


GO
CREATE TABLE [dbo].[document_meets] (
    [id]               INT          IDENTITY (1, 1) NOT NULL,
    [id_doc_meet_link] INT          NOT NULL,
    [employee_sid]     VARCHAR (46) NOT NULL,
    [dattim1]          DATETIME     NOT NULL,
    CONSTRAINT [PK_document_meets] PRIMARY KEY CLUSTERED ([id] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[documents]...';


GO
CREATE TABLE [dbo].[documents] (
    [id]          INT              IDENTITY (1, 1) NOT NULL,
    [data_sid]    UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL,
    [data]        VARBINARY (MAX)  NOT NULL,
    [name]        NVARCHAR (500)   NOT NULL,
    [dattim1]     DATETIME         NOT NULL,
    [dattim2]     DATETIME         NOT NULL,
    [enabled]     BIT              NOT NULL,
    [creator_sid] VARCHAR (46)     NOT NULL,
    [deleter_sid] VARCHAR (46)     NULL,
    CONSTRAINT [PK_documents] PRIMARY KEY CLUSTERED ([id] ASC) ON [PRIMARY],
    CONSTRAINT [UQ__document__CC80C6D41F98B2C1] UNIQUE NONCLUSTERED ([data_sid] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[holiday_work_confirms]...';


GO
CREATE TABLE [dbo].[holiday_work_confirms] (
    [id]             INT          IDENTITY (1, 1) NOT NULL,
    [employee_sid]   VARCHAR (46) NOT NULL,
    [id_hw_document] INT          NOT NULL,
    [dattim1]        DATETIME     NOT NULL,
    CONSTRAINT [PK_holiday_work_confirms] PRIMARY KEY CLUSTERED ([id] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[holiday_work_documents]...';


GO
CREATE TABLE [dbo].[holiday_work_documents] (
    [id]          INT          IDENTITY (1, 1) NOT NULL,
    [dattim1]     DATETIME     NOT NULL,
    [enabled]     BIT          NOT NULL,
    [date_start]  DATE         NOT NULL,
    [date_end]    DATE         NOT NULL,
    [creator_sid] VARCHAR (46) NOT NULL,
    CONSTRAINT [PK_holiday_work_delivery] PRIMARY KEY CLUSTERED ([id] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[org_state_images]...';


GO
CREATE TABLE [dbo].[org_state_images] (
    [id]              INT                        IDENTITY (1, 1) NOT NULL,
    [id_organization] INT                        NOT NULL,
    [data]            VARBINARY (MAX) FILESTREAM NOT NULL,
    [enabled]         BIT                        NOT NULL,
    [data_sid]        UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [dattim1]         DATETIME                   NOT NULL,
    [dattim2]         DATETIME                   NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([data_sid] ASC)
);


GO
PRINT N'Creating [dbo].[DF_document_links_dattim1]...';


GO
ALTER TABLE [dbo].[document_meet_links]
    ADD CONSTRAINT [DF_document_links_dattim1] DEFAULT (getdate()) FOR [dattim1];


GO
PRINT N'Creating [dbo].[DF_document_meet_links_enabled]...';


GO
ALTER TABLE [dbo].[document_meet_links]
    ADD CONSTRAINT [DF_document_meet_links_enabled] DEFAULT ((1)) FOR [enabled];


GO
PRINT N'Creating [dbo].[DF_document_meet_links_dattim2]...';


GO
ALTER TABLE [dbo].[document_meet_links]
    ADD CONSTRAINT [DF_document_meet_links_dattim2] DEFAULT ('3.3.3333') FOR [dattim2];


GO
PRINT N'Creating [dbo].[DF_document_meets_dattim1]...';


GO
ALTER TABLE [dbo].[document_meets]
    ADD CONSTRAINT [DF_document_meets_dattim1] DEFAULT (getdate()) FOR [dattim1];


GO
PRINT N'Creating [dbo].[DF_documents_dattim1]...';


GO
ALTER TABLE [dbo].[documents]
    ADD CONSTRAINT [DF_documents_dattim1] DEFAULT (getdate()) FOR [dattim1];


GO
PRINT N'Creating [dbo].[DF_documents_dattim2]...';


GO
ALTER TABLE [dbo].[documents]
    ADD CONSTRAINT [DF_documents_dattim2] DEFAULT ('3.3.3333') FOR [dattim2];


GO
PRINT N'Creating [dbo].[DF_documents_enabled]...';


GO
ALTER TABLE [dbo].[documents]
    ADD CONSTRAINT [DF_documents_enabled] DEFAULT ((1)) FOR [enabled];


GO
PRINT N'Creating [dbo].[DF_holiday_work_confirms_dattim1]...';


GO
ALTER TABLE [dbo].[holiday_work_confirms]
    ADD CONSTRAINT [DF_holiday_work_confirms_dattim1] DEFAULT (getdate()) FOR [dattim1];


GO
PRINT N'Creating [dbo].[DF_holiday_work_delivery_dattim1]...';


GO
ALTER TABLE [dbo].[holiday_work_documents]
    ADD CONSTRAINT [DF_holiday_work_delivery_dattim1] DEFAULT (getdate()) FOR [dattim1];


GO
PRINT N'Creating [dbo].[DF_holiday_work_delivery_enabled]...';


GO
ALTER TABLE [dbo].[holiday_work_documents]
    ADD CONSTRAINT [DF_holiday_work_delivery_enabled] DEFAULT ((1)) FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[org_state_images]...';


GO
ALTER TABLE [dbo].[org_state_images]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[org_state_images]...';


GO
ALTER TABLE [dbo].[org_state_images]
    ADD DEFAULT newid() FOR [data_sid];


GO
PRINT N'Creating unnamed constraint on [dbo].[org_state_images]...';


GO
ALTER TABLE [dbo].[org_state_images]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[org_state_images]...';


GO
ALTER TABLE [dbo].[org_state_images]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Refreshing [dbo].[employees_report]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[employees_report]';


GO
PRINT N'Refreshing [dbo].[employees_view]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[employees_view]';


GO
PRINT N'Altering [dbo].[get_employee]...';


GO
ALTER PROCEDURE [dbo].[get_employee]
    @id INT = NULL ,
    @get_photo BIT = 0 ,
	@ad_sid VARCHAR(46) = NULL
AS
    BEGIN
        SET NOCOUNT ON;
        SELECT  e.id ,
                ad_sid ,
                id_manager ,
                surname ,
                e.name ,
                patronymic ,
                e.full_name ,
                display_name ,
                id_position ,
                id_organization ,
                e.email ,
                work_num ,
                mobil_num ,
                id_emp_state ,
                id_department ,
                id_city ,
                date_came ,
                birth_date ,
                ( SELECT    e2.display_name
                  FROM      employees e2
                  WHERE     e2.id = e.id_manager
                ) AS manager,
                ( SELECT    e2.email
                  FROM      employees e2
                  WHERE     e2.id = e.id_manager
                ) AS manager_email ,
                es.name AS emp_state ,
				es.sys_name as emp_state_sys_name,
                p.name AS position ,
                o.name AS organization ,
                c.name AS city ,
                d.name AS department ,
				case when male=1 then 1 else 0 end as male,
				id_position_org,
				p_org.name as position_org,
				CASE WHEN e.has_ad_account = 1 THEN 1 ELSE 0 END AS has_ad_account,
				ad_login,
				e.dattim1 as date_create
				,
				CASE WHEN @get_photo = 1
                     THEN ( SELECT TOP 1
                                    picture
                            FROM    photos ph
                            WHERE   ph.enabled = 1
                                    AND ph.id_employee = e.id
                          )
                     ELSE NULL
                END AS photo,
				full_name_dat,
				full_name_rod
				--,
				--CASE WHEN @id_department IS NOT NULL THEN 
				--CASE WHEN EXISTS(SELECT 1 FROM departments dd WHERE dd.id=@id_department AND dd.id_chief=e.id) THEN 0 ELSE 1 end
				--ELSE NULL END AS is_chief
        FROM    employees e
		INNER JOIN employee_states es ON e.id_emp_state = es.id
                INNER JOIN positions p ON e.id_position = p.id
				INNER JOIN positions p_org ON e.id_position_org = p_org.id
                INNER JOIN organizations o ON e.id_organization = o.id
                INNER JOIN cities c ON e.id_city = c.id
                INNER JOIN departments d ON e.id_department = d.id
        WHERE ((@id is null or @id <= 0) or (@id is not null and @id > 0 and e.id = @id))
		and ((@ad_sid is null or @ad_sid = '') or (@ad_sid is not null and @ad_sid != '' and e.ad_sid = @ad_sid))
    END
GO
PRINT N'Altering [dbo].[get_organization]...';


GO
ALTER PROCEDURE [dbo].[get_organization] @id INT = NULL, @sys_name nvarchar(50) = null
AS
    BEGIN
        SET NOCOUNT ON;
        SELECT  id ,
                name ,
                ( SELECT    COUNT(1)
                  FROM      employees_view e
                  WHERE     e.id_organization = o.id
                ) AS emp_count ,
                address_ur ,
                address_fact ,
                phone ,
                email ,
                inn ,
                kpp ,
                ogrn ,
                rs ,
                bank ,
                ks ,
                bik ,
                okpo ,
                okved ,
                manager_name ,
                manager_name_dat ,
                manager_position ,
                manager_position_dat,
				site,
				director_sid
        FROM    organizations o
        WHERE   o.enabled = 1
                AND ( @id IS NULL
                      OR ( @id IS NOT NULL
                           AND @id > 0
                           AND o.id = @id
                         )
                    )
					AND ( @sys_name IS NULL or @sys_name = ''
                      OR ( @sys_name IS NOT NULL
                           AND @sys_name != ''
                           AND o.sys_name = @sys_name
                         )
                    )
        ORDER BY name
    END
GO
PRINT N'Altering [dbo].[save_organization]...';


GO
ALTER PROCEDURE [dbo].[save_organization]
    @id INT = NULL ,
    @name NVARCHAR(150) ,
    @creator_sid VARCHAR(46) = NULL ,
    @address_ur NVARCHAR(500) = NULL ,
    @address_fact NVARCHAR(500) = NULL ,
    @phone NVARCHAR(50) = NULL ,
    @email NVARCHAR(50) = NULL ,
    @inn NVARCHAR(12) = NULL ,
    @kpp NVARCHAR(20) = NULL ,
    @ogrn NVARCHAR(20) = NULL ,
    @rs NVARCHAR(50) = NULL ,
    @bank NVARCHAR(500) = NULL ,
    @ks NVARCHAR(50) = NULL ,
    @bik NVARCHAR(50) = NULL ,
    @okpo NVARCHAR(50) = NULL ,
    @okved NVARCHAR(50) = NULL ,
    @manager_name NVARCHAR(150) = NULL ,
    @manager_name_dat NVARCHAR(150) = NULL ,
    @manager_position NVARCHAR(250) = NULL ,
    @manager_position_dat NVARCHAR(250) = NULL,
	@site NVARCHAR(50) = NULL,
	@director_sid varchar(46)
AS
    BEGIN
        SET NOCOUNT ON;
        IF @id IS NOT NULL
            AND @id > 0
            AND EXISTS ( SELECT 1
                         FROM   organizations
                         WHERE  id = @id )
            BEGIN
                UPDATE  organizations
                SET     name = @name,
				address_ur =@address_ur,
                          address_fact = @address_fact,
                          phone = @phone,
                          email = @email,
                          inn = @inn,
                          kpp = @kpp,
                          ogrn = @ogrn,
                          rs = @rs,
                          bank = @bank,
                          ks = @ks,
                          bik = @bik,
                          okpo = @okpo,
                          okved = @okved,
                          manager_name = @manager_name,
                          manager_name_dat = @manager_name_dat,
                          manager_position = @manager_position,
                          manager_position_dat =@manager_position_dat,
						  SITE = @site,
						  director_sid = @director_sid
                WHERE   id = @id
            END
        ELSE
            BEGIN
                INSERT  INTO organizations
                        ( name ,
                          creator_sid ,
                          address_ur ,
                          address_fact ,
                          phone ,
                          email ,
                          inn ,
                          kpp ,
                          ogrn ,
                          rs ,
                          bank ,
                          ks ,
                          bik ,
                          okpo ,
                          okved ,
                          manager_name ,
                          manager_name_dat ,
                          manager_position ,
                          manager_position_dat ,
						  site,
						  director_sid
                        )
                VALUES  ( @name ,
                          @creator_sid ,
                          @address_ur ,
                          @address_fact ,
                          @phone ,
                          @email ,
                          @inn ,
                          @kpp ,
                          @ogrn ,
                          @rs ,
                          @bank ,
                          @ks ,
                          @bik ,
                          @okpo ,
                          @okved ,
                          @manager_name ,
                          @manager_name_dat ,
                          @manager_position ,
                          @manager_position_dat ,
						  @site,
						  @director_sid
                        )

                SELECT  @id = @@IDENTITY
            END
	 
        SELECT  @id AS id
    END
GO
PRINT N'Altering [dbo].[get_employee_list]...';


GO
ALTER PROCEDURE [dbo].[get_employee_list]
	@id INT = NULL ,
    @id_emp_state INT = NULL ,
    @get_photo BIT = 0 ,
    @id_department INT = NULL,
	@ad_sid VARCHAR(46) = NULL,
	@id_city INT = NULL,
	@id_manager int = null
AS
    BEGIN
        SET NOCOUNT ON;
        SELECT  e.id ,
                ad_sid ,
                id_manager ,
                surname ,
                e.name ,
                patronymic ,
                e.full_name ,
                display_name ,
                id_position ,
                id_organization ,
                email ,
                work_num ,
                mobil_num ,
                id_emp_state ,
                id_department ,
                id_city ,
                date_came ,
                birth_date ,
                manager,
                manager_email ,
                emp_state ,
                position ,
                organization ,
                city ,
                department ,
                CASE WHEN @get_photo = 1
                     THEN ( SELECT TOP 1
                                    picture
                            FROM    photos ph
                            WHERE   ph.enabled = 1
                                    AND ph.id_employee = e.id
                          )
                     ELSE NULL
                END AS photo,
				CASE WHEN @id_department IS NOT NULL THEN 
				CASE WHEN EXISTS(SELECT 1 FROM departments dd WHERE dd.id=@id_department AND dd.id_chief=e.id) THEN 0 ELSE 1 end
				ELSE NULL END AS is_chief,
				 male,
				id_position_org,
				position_org,
				has_ad_account,
				ad_login
        FROM    employees_view e
        WHERE  
		( @id IS NULL 
                      OR ( @id IS NOT NULL
                           AND @id > 0
                           AND e.id = @id
                         )
                    )
				AND ( @ad_sid IS NULL OR @ad_sid = ''
                      OR ( @ad_sid IS NOT NULL
                           AND @ad_sid != ''
                           AND e.ad_sid = @ad_sid
                         )
                    )	
                AND ( ( @id_department IS NULL
                        OR @id_department <= 0
                      )
                      OR ( @id_department IS NOT NULL
                           AND @id_department > 0
                           AND id_department = @id_department
                         )
                    )
					AND ( ( @id_city IS NULL
                        OR @id_city <= 0
                      )
                      OR ( @id_city IS NOT NULL
                           AND @id_city > 0
                           AND id_city = @id_city
                         )
                    )
					AND ( ( @id_manager IS NULL
                        OR @id_manager <= 0
                      )
                      OR ( @id_manager IS NOT NULL
                           AND @id_manager > 0
                           AND id_manager = @id_manager
                         )
                    )
					ORDER BY is_chief, e.full_name
    END
GO
PRINT N'Altering [dbo].[get_employees_newbie]...';


GO
ALTER PROCEDURE [dbo].[get_employees_newbie]
	@date_came date
AS
    BEGIN
        SET NOCOUNT ON;
		select id, full_name, position,city,department, date_newbie
		from (
		SELECT id, full_name, position,city,department, case when date_came is not null and convert(date,date_came) > convert(date,date_create) then convert(date,date_came) else convert(date,date_create) end as date_newbie
		FROM employees_view ) as t
		where t.date_newbie = @date_came
    END
GO
PRINT N'Altering [dbo].[get_position]...';


GO
ALTER PROCEDURE [dbo].[get_position]
	@id int = null
AS
begin
SET NOCOUNT ON;
	select id, name,
	name_rod,
	(
	select count(1) from employees_view e  where e.id_position=p.id
	) as emp_count
	,name_dat
	 from positions p
	where p.enabled=1
	AND ( @id IS NULL
                      OR ( @id IS NOT NULL
                           AND @id > 0
                           AND p.id = @id
                         )
                    )
					order by name
end
GO
PRINT N'Altering [dbo].[save_position]...';


GO
ALTER PROCEDURE [dbo].[save_position]
	@id INT = NULL ,
    @name NVARCHAR(500),
	@creator_sid varchar(46)=NULL,
	@name_rod NVARCHAR(500),
	@name_dat nvarchar(500)
AS
    BEGIN
	SET NOCOUNT ON;
        IF @id IS NOT NULL
            AND @id > 0
            AND EXISTS ( SELECT 1
                         FROM   positions
                         WHERE  id = @id )
            BEGIN
                UPDATE  positions
                SET     name = @name , name_rod=@name_rod, name_dat=@name_dat
                WHERE   id = @id
            END
        ELSE
            BEGIN
                INSERT  INTO positions
                        ( name  ,creator_sid, name_rod,name_dat
                        )
                VALUES  ( @name  ,@creator_sid, @name_rod,@name_dat
                        )

						SELECT @id=@@IDENTITY
            END
	 
		SELECT @id AS id
    END
GO
PRINT N'Altering [dbo].[save_employee]...';


GO
ALTER PROCEDURE [dbo].[save_employee]
    @id INT = NULL ,
    @ad_sid VARCHAR(46) ,
    @id_manager INT ,
    @surname NVARCHAR(50) ,
    @name NVARCHAR(50) ,
    @patronymic NVARCHAR(50)=null ,
    @full_name NVARCHAR(150) ,
    @display_name NVARCHAR(100) ,
    @id_position INT ,
    @id_organization INT ,
    @email NVARCHAR(150) = null,
    @work_num NVARCHAR(50)  = null,
    @mobil_num NVARCHAR(50)  = null,
    @id_emp_state INT ,
    @id_department INT ,
    @id_city INT ,
    @date_came DATE =null ,
	@birth_date date= null,
	@male bit,
	@id_position_org int,
	@has_ad_account bit,
	@creator_sid varchar(46)=null,
	@date_fired date = null,
	@full_name_dat nvarchar(150) = null,
	@full_name_rod nvarchar(150) = null
AS
    BEGIN
        SET NOCOUNT ON;
        IF @id IS NOT NULL
            AND @id > 0
            AND EXISTS ( SELECT 1
                         FROM   employees
                         WHERE  id = @id )
            BEGIN
                UPDATE  employees
                SET     ad_sid = @ad_sid ,
                        id_manager = @id_manager ,
                        surname = @surname ,
                        NAME = @name ,
                        patronymic = @patronymic ,
                        full_name = @full_name ,
                        display_name = @display_name ,
                        id_position = @id_position ,
                        id_organization = @id_organization ,
                        email = @email ,
                        work_num = @work_num ,
                        mobil_num = @mobil_num ,
                        --id_emp_state = @id_emp_state ,
                        id_department = @id_department ,
                        id_city = @id_city ,
                        date_came = @date_came,
						birth_date=@birth_date,
						male=@male,
						id_position_org=@id_position_org,
						has_ad_account = @has_ad_account,
						full_name_dat = @full_name_dat,
						full_name_rod = @full_name_rod
                WHERE   id = @id
            END
        ELSE
            BEGIN
                INSERT  INTO employees
                        ( ad_sid ,
                          id_manager ,
                          surname ,
                          name ,
                          patronymic ,
                          full_name ,
                          display_name ,
                          id_position ,
                          id_organization ,
                          email ,
                          work_num ,
                          mobil_num ,
                          id_emp_state ,
                          id_department ,
                          id_city ,
                          date_came ,
						  birth_date,
						  male,
						  id_position_org,
						  has_ad_account,
						  creator_sid,
						  full_name_dat,
						  full_name_rod
                        )
                VALUES  ( @ad_sid ,
                          @id_manager ,
                          @surname ,
                          @name ,
                          @patronymic ,
                          @full_name ,
                          @display_name ,
                          @id_position ,
                          @id_organization ,
                          @email ,
                          @work_num ,
                          @mobil_num ,
                          @id_emp_state ,
                          @id_department ,
                          @id_city ,
                          @date_came  ,
						  @birth_date,
						  @male,
						  @id_position_org,
						  @has_ad_account,
						  @creator_sid,
						  @full_name_dat,
						  @full_name_rod
                        )

                SELECT  @id = @@IDENTITY
            END
	 
        SELECT @id AS id
    END
GO
PRINT N'Creating [dbo].[close_doc_meet_link]...';


GO
CREATE PROCEDURE [dbo].[close_doc_meet_link]
    @id INT = NULL ,
    @id_document INT = NULL ,
    @id_department INT = NULL ,
    @id_position INT = NULL ,
    @id_employee INT = NULL ,
    @deleter_sid VARCHAR(46)
AS
    BEGIN
        SET NOCOUNT ON;

        IF ( @id IS NOT NULL
             AND @id > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id = @id
            END
    
        IF ( @id_document IS NOT NULL
             AND @id_document > 0
             AND @id_department IS NOT NULL
             AND @id_department > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id_document = @id_document
                        AND id_department = @id_department
            END
    
        IF ( @id_document IS NOT NULL
             AND @id_document > 0
             AND @id_position IS NOT NULL
             AND @id_position > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id_document = @id_document
                        AND id_position = @id_position
            END
    
        IF ( @id_document IS NOT NULL
             AND @id_document > 0
             AND @id_employee IS NOT NULL
             AND @id_employee > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id_document = @id_document
                        AND id_employee = @id_employee
            END
    
    END
GO
PRINT N'Creating [dbo].[close_document]...';


GO
CREATE PROCEDURE [dbo].[close_document] 
	@id int
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE documents 
    SET ENABLED = 0, dattim2=GETDATE()
    WHERE id=@id
    
    UPDATE document_meet_links
    SET ENABLED = 0, dattim2=GETDATE()
    WHERE ENABLED = 1 and id_document=@id
END
GO
PRINT N'Creating [dbo].[close_org_state_image]...';


GO
CREATE PROCEDURE [dbo].[close_org_state_image]@id INT
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE  org_state_images
        SET     enabled = 0, dattim2 = getdate()
        WHERE   id = @id
    END
GO
PRINT N'Creating [dbo].[get_doc_meet_link_list]...';


GO
CREATE PROCEDURE [dbo].[get_doc_meet_link_list]
	@id_document int
AS
begin
set nocount on;
	select id_department, id_position, id_employee from document_meet_links
	where enabled=1 and id_document=@id_document
end
GO
PRINT N'Creating [dbo].[get_document_list]...';


GO
CREATE PROCEDURE [dbo].[get_document_list]	 
	@id_department INT = NULL,
	@id_position INT = NULL,
	@id_employee INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT d.id, d.data, d.NAME
	FROM documents d 
	WHERE d.ENABLED = 1 AND 
	(@id_department IS NULL OR @id_department <= 0 OR (@id_department IS NOT NULL AND @id_department > 0 AND EXISTS(SELECT 1 FROM document_meet_links dml WHERE dml.id_document = d.id AND dml.id_department = @id_department)))

AND 
	(@id_position IS NULL OR @id_position <= 0 OR (@id_position IS NOT NULL AND @id_position > 0 AND EXISTS(SELECT 1 FROM document_meet_links dml WHERE dml.id_document = d.id AND dml.id_position = @id_position)))

AND 
	(@id_employee IS NULL OR @id_employee <= 0 OR (@id_employee IS NOT NULL AND @id_employee > 0 AND EXISTS(SELECT 1 FROM document_meet_links dml WHERE dml.id_document = d.id AND dml.id_employee = @id_employee)))		
END
GO
PRINT N'Creating [dbo].[get_org_state_image]...';


GO
CREATE PROCEDURE [dbo].[get_org_state_image]
	@id_organization int
	as begin
	set nocount on;
	select id, data,id_organization from org_state_images o
	where enabled=1 and id_organization = @id_organization
	end
GO
PRINT N'Creating [dbo].[save_doc_meet_link]...';


GO
CREATE PROCEDURE [dbo].[save_doc_meet_link] 
	@id_document INT,
	@id_department INT = NULL,
	@id_position INT = NULL,
	@id_employee INT = NULL,
	@creator_sid varchar(46) = null
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @id int
    INSERT INTO document_meet_links (id_document, id_department, id_position, id_employee, creator_sid)
    VALUES (@id_document, @id_department, @id_position, @id_employee, @creator_sid)
    SET @id = @@IDENTITY
    SELECT @id AS id
END
GO
PRINT N'Creating [dbo].[save_document]...';


GO
CREATE PROCEDURE [dbo].[save_document] 
	@data VARBINARY(MAX),
	@name NVARCHAR(500),
	@creator_sid VARCHAR(46)
AS
BEGIN
	SET NOCOUNT ON;
DECLARE @id int
   INSERT INTO documents (data, name,creator_sid)
   VALUES(@data, @name, @creator_sid)
   SET @id=@@IDENTITY
   SELECT @id AS  id
END
GO
PRINT N'Creating [dbo].[save_holiday_work_confirm]...';


GO
CREATE PROCEDURE [dbo].[save_holiday_work_confirm]	 
	@id_hw_document INT,
	@employee_sid VARCHAR(46)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    INSERT INTO holiday_work_confirms (id_hw_document, employee_sid)
    VALUES (@id_hw_document, @employee_sid)
END
GO
PRINT N'Creating [dbo].[save_holiday_work_document]...';


GO
CREATE PROCEDURE [dbo].[save_holiday_work_document]	 
	@date_start DATE,
	@date_end DATE,
	@creator_sid VARCHAR(46)
AS
BEGIN
	SET NOCOUNT ON;

    INSERT INTO holiday_work_documents (date_start, date_end, creator_sid)
    VALUES (@date_start,@date_end, @creator_sid)
    
END
GO
PRINT N'Creating [dbo].[save_org_state_image]...';


GO
CREATE PROCEDURE [dbo].[save_org_state_image]
	@id_organization INT,
	@data VARBINARY(MAX)
AS
BEGIN
set NOCOUNT ON;
declare @id int
INSERT INTO org_state_images(id_organization, data)
values(@id_organization, @data)
select @id=@@IDENTITY
select @id as id
END
GO
PRINT N'Creating [dbo].[set_employee_date_fired]...';


GO
CREATE PROCEDURE [dbo].[set_employee_date_fired]
	@id_employee int,
	@date_fired date
	as begin set nocount on;
	update employees
	set date_fired=@date_fired
	where id=@id_employee
	end
GO
PRINT N'Refreshing [dbo].[close_organization]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[close_organization]';


GO
PRINT N'Refreshing [dbo].[get_other_employee_list]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_other_employee_list]';


GO
PRINT N'Refreshing [dbo].[get_city]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_city]';


GO
PRINT N'Refreshing [dbo].[get_city_link_count]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_city_link_count]';


GO
PRINT N'Refreshing [dbo].[get_department]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_department]';


GO
PRINT N'Refreshing [dbo].[get_employees_birthday]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_employees_birthday]';


GO
PRINT N'Refreshing [dbo].[get_organization_link_count]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_organization_link_count]';


GO
PRINT N'Refreshing [dbo].[get_position_link_count]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[get_position_link_count]';


GO
PRINT N'Refreshing [dbo].[close_position]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[close_position]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ff489da1-765c-4f1c-96a8-56c61c622d40')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ff489da1-765c-4f1c-96a8-56c61c622d40')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a1f343ac-87da-45a0-a624-c10cf602e570')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a1f343ac-87da-45a0-a624-c10cf602e570')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ac0d019b-3346-4300-a96e-cb6766d554c5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ac0d019b-3346-4300-a96e-cb6766d554c5')

GO

GO
/*
Шаблон скрипта после развертывания							
--------------------------------------------------------------------------------------
 В данном файле содержатся инструкции SQL, которые будут добавлены в скрипт построения.		
 Используйте синтаксис SQLCMD для включения файла в скрипт после развертывания.			
 Пример:      :r .\myfile.sql								
 Используйте синтаксис SQLCMD для создания ссылки на переменную в скрипте после развертывания.		
 Пример:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GRANT EXECUTE ON SCHEMA ::dbo TO sqlUnit_prog
--:r .\ins_emp_states.sql
--:r .\ins_orgs.sql
--:r .\ins_cities.sql
--:r .\ins_positions.sql
GO

GO
PRINT N'Update complete.';


GO
