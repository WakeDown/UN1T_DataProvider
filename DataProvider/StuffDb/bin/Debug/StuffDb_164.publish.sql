/*
Deployment script for Stuff

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Stuff"
:setvar DefaultFilePrefix "Stuff"
:setvar DefaultDataPath "S:\SQL-DB\MSSQL10_50.MSSQLSERVER\MSSQL\Data\"
:setvar DefaultLogPath "T:\SQL-TL\MSSQL10_50.MSSQLSERVER\MSSQL\Data\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering [dbo].[close_doc_meet_link]...';


GO
ALTER PROCEDURE [dbo].[close_doc_meet_link]
    @id INT = NULL ,
    @id_document INT = NULL ,
    @id_department INT = NULL ,
    @id_position INT = NULL ,
    @id_employee INT = NULL ,
    @deleter_sid VARCHAR(46)
AS
    BEGIN
        SET NOCOUNT ON;

        IF ( @id IS NOT NULL
             AND @id > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id = @id
            END
    
        IF ( @id_document IS NOT NULL
             AND @id_document > 0
             AND @id_department IS NOT NULL
             AND @id_department > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id_document = @id_document
                        AND id_department = @id_department
            END
    
        IF ( @id_document IS NOT NULL
             AND @id_document > 0
             AND @id_position IS NOT NULL
             AND @id_position > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id_document = @id_document
                        AND id_position = @id_position
            END
    
        IF ( @id_document IS NOT NULL
             AND @id_document > 0
             AND @id_employee IS NOT NULL
             AND @id_employee > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id_document = @id_document
                        AND id_employee = @id_employee
            END
    
    END
GO
PRINT N'Altering [dbo].[close_document]...';


GO
ALTER PROCEDURE [dbo].[close_document] 
	@id int
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE documents 
    SET ENABLED = 0, dattim2=GETDATE()
    WHERE id=@id
    
    UPDATE document_meet_links
    SET ENABLED = 0, dattim2=GETDATE()
    WHERE ENABLED = 1 and id_document=@id
END
GO
PRINT N'Altering [dbo].[get_document_list]...';


GO
ALTER PROCEDURE [dbo].[get_document_list]	 
	@id_department INT = NULL,
	@id_position INT = NULL,
	@id_employee INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT d.id, d.data, d.NAME
	FROM documents d 
	WHERE d.ENABLED = 1 AND 
	(@id_department IS NULL OR @id_department <= 0 OR (@id_department IS NOT NULL AND @id_department > 0 AND EXISTS(SELECT 1 FROM document_meet_links dml WHERE dml.id_document = d.id AND dml.id_department = @id_department)))

AND 
	(@id_position IS NULL OR @id_position <= 0 OR (@id_position IS NOT NULL AND @id_position > 0 AND EXISTS(SELECT 1 FROM document_meet_links dml WHERE dml.id_document = d.id AND dml.id_position = @id_position)))

AND 
	(@id_employee IS NULL OR @id_employee <= 0 OR (@id_employee IS NOT NULL AND @id_employee > 0 AND EXISTS(SELECT 1 FROM document_meet_links dml WHERE dml.id_document = d.id AND dml.id_employee = @id_employee)))		
END
GO
PRINT N'Altering [dbo].[save_doc_meet_link]...';


GO
ALTER PROCEDURE [dbo].[save_doc_meet_link] 
	@id_document INT,
	@id_department INT = NULL,
	@id_position INT = NULL,
	@id_employee INT = NULL,
	@creator_sid varchar(46) = null
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @id int
    INSERT INTO document_meet_links (id_document, id_department, id_position, id_employee, creator_sid)
    VALUES (@id_document, @id_department, @id_position, @id_employee, @creator_sid)
    SET @id = @@IDENTITY
    SELECT @id AS id
END
GO
PRINT N'Altering [dbo].[save_document]...';


GO
ALTER PROCEDURE [dbo].[save_document] 
	@data VARBINARY(MAX),
	@name NVARCHAR(500),
	@creator_sid VARCHAR(46)
AS
BEGIN
	SET NOCOUNT ON;
DECLARE @id int
   INSERT INTO documents (data, name,creator_sid)
   VALUES(@data, @name, @creator_sid)
   SET @id=@@IDENTITY
   SELECT @id AS  id
END
GO
PRINT N'Altering [dbo].[save_holiday_work_confirm]...';


GO
ALTER PROCEDURE [dbo].[save_holiday_work_confirm]	 
	@id_hw_document INT,
	@employee_sid VARCHAR(46)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    INSERT INTO holiday_work_confirms (id_hw_document, employee_sid)
    VALUES (@id_hw_document, @employee_sid)
END
GO
PRINT N'Altering [dbo].[save_holiday_work_document]...';


GO
ALTER PROCEDURE [dbo].[save_holiday_work_document]	 
	@date_start DATE,
	@date_end DATE,
	@creator_sid VARCHAR(46)
AS
BEGIN
	SET NOCOUNT ON;

    INSERT INTO holiday_work_documents (date_start, date_end, creator_sid)
    VALUES (@date_start,@date_end, @creator_sid)
    
END
GO
PRINT N'Creating [dbo].[get_doc_meet_link_list]...';


GO
CREATE PROCEDURE [dbo].[get_doc_meet_link_list]
	@id_document int
AS
begin
set nocount on;
	select id_department, id_position, id_employee from document_meet_links
	where enabled=1 and id_document=@id_document
end
GO
/*
Шаблон скрипта после развертывания							
--------------------------------------------------------------------------------------
 В данном файле содержатся инструкции SQL, которые будут добавлены в скрипт построения.		
 Используйте синтаксис SQLCMD для включения файла в скрипт после развертывания.			
 Пример:      :r .\myfile.sql								
 Используйте синтаксис SQLCMD для создания ссылки на переменную в скрипте после развертывания.		
 Пример:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GRANT EXECUTE ON SCHEMA ::dbo TO sqlUnit_prog
--:r .\ins_emp_states.sql
--:r .\ins_orgs.sql
--:r .\ins_cities.sql
--:r .\ins_positions.sql
GO

GO
PRINT N'Update complete.';


GO
