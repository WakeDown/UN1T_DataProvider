/*
Deployment script for StuffDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "StuffDb"
:setvar DefaultFilePrefix "StuffDb"
:setvar DefaultDataPath "C:\Users\anton.rehov\AppData\Local\Microsoft\VisualStudio\SSDT\DataProvider"
:setvar DefaultLogPath "C:\Users\anton.rehov\AppData\Local\Microsoft\VisualStudio\SSDT\DataProvider"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key 7925ff97-a267-45fb-a848-6fa5f2fe5653 is skipped, element [dbo].[employee].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key a3723de1-4beb-4652-a154-46de2422ba12 is skipped, element [dbo].[employee].[tel_num] (SqlSimpleColumn) will not be renamed to work_num';


GO
PRINT N'Rename refactoring operation with key d7ee292b-9850-440d-9616-d8a8f37c8ae0 is skipped, element [dbo].[organizations].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key eb2ab5df-e261-4998-a95f-ae5bfb59155b is skipped, element [dbo].[positions].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key e7f65736-d392-41b7-8ebb-9f4ba1dee9dd is skipped, element [dbo].[employee_states].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key d2eaf850-694c-4a9e-859c-9510f62c3a6d is skipped, element [dbo].[departments].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 10667296-64fc-4f83-8fef-3cf8692fb187 is skipped, element [dbo].[departments].[id_] (SqlSimpleColumn) will not be renamed to id_chief';


GO
PRINT N'Rename refactoring operation with key cd1f7aba-4005-420b-b279-54526660c2c6 is skipped, element [dbo].[photos].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key e85b3eb9-eb91-41bc-8f17-3350b8f8734a is skipped, element [dbo].[cities].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 5296580b-af79-40ef-8058-a120eee6eb0e is skipped, element [dbo].[organizations].[enaled] (SqlSimpleColumn) will not be renamed to enabled';


GO
PRINT N'Rename refactoring operation with key a5e503e6-194d-4807-bdf8-ea81dfd26fdb is skipped, element [dbo].[organizations].[display] (SqlSimpleColumn) will not be renamed to display_in_list';


GO
PRINT N'Rename refactoring operation with key 5db26c6e-1291-40f2-b192-769be44d3ae7 is skipped, element [dbo].[employee_states].[list_display] (SqlSimpleColumn) will not be renamed to display_in_list';


GO
PRINT N'Rename refactoring operation with key dd3b36f5-0a82-4dad-8ed1-083e4fdc1852 is skipped, element [dbo].[employee_states].[order] (SqlSimpleColumn) will not be renamed to order_num';


GO
PRINT N'Rename refactoring operation with key 72634209-685d-44e2-ba29-32e812a00340, aebbc97b-5295-4b14-b189-6514b3640211 is skipped, element [dbo].[employees].[id_creator] (SqlSimpleColumn) will not be renamed to creator_sid';


GO
PRINT N'Rename refactoring operation with key e068b3a1-f7e7-4bc6-a2ea-1699f48e65eb is skipped, element [dbo].[organizations].[address] (SqlSimpleColumn) will not be renamed to address_ur';


GO
PRINT N'Rename refactoring operation with key ea52b8de-f887-4231-b2cb-8cd2ac2de5ea is skipped, element [dbo].[organizations].[Bank] (SqlSimpleColumn) will not be renamed to bank';


GO
PRINT N'Rename refactoring operation with key ac0d019b-3346-4300-a96e-cb6766d554c5 is skipped, element [dbo].[employees].[full_name_vin] (SqlSimpleColumn) will not be renamed to full_name_rod';


GO
PRINT N'Rename refactoring operation with key 829bf348-14b0-4d11-a174-31486bbf0a80 is skipped, element [dbo].[employee_import].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 92296c25-d147-4ba8-98e8-4be6cfb7452d is skipped, element [dbo].[position_import].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key e15275eb-b26d-4eee-beb0-f26c98dd4601 is skipped, element [dbo].[wd_confirms].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 3fcaf8df-f502-49b6-8b6a-04a6d2381137 is skipped, element [dbo].[budget].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key f3912622-2bbc-46ce-bd79-aeb95464ad49 is skipped, element [dbo].[vendor_states].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key a941cad8-0dba-4f16-9cc0-2f7c8e81ab84, 40221f0d-0f03-48f7-a1d9-c93b888a56f5 is skipped, element [dbo].[vendor_states].[vendor] (SqlSimpleColumn) will not be renamed to id_vendor';


GO
PRINT N'Rename refactoring operation with key 75cfe720-4a20-4aff-82c1-227145f811dc is skipped, element [dbo].[vendors].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 097bbe22-a5f8-49ce-a2a1-89e1cac8f268 is skipped, element [dbo].[vendor_states].[language] (SqlSimpleColumn) will not be renamed to id_language';


GO
PRINT N'Rename refactoring operation with key bcd24a28-35bb-4db4-9fa8-ed851f026412 is skipped, element [dbo].[languages].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key 22aa0e5a-6677-4925-bb04-b0480e05ab86, 9dd1cee7-c0be-40c2-8c49-083c4f13be17 is skipped, element [dbo].[vendor_states].[has_delivery] (SqlSimpleColumn) will not be renamed to expired_delivery_sent';


GO
PRINT N'Rename refactoring operation with key 51cee6bb-6dd2-4018-aa4a-85232e79ede1 is skipped, element [dbo].[vendor_states].[is_new_delivery] (SqlSimpleColumn) will not be renamed to new_delivery_sent';


GO
PRINT N'Rename refactoring operation with key 351d335d-3074-468d-b5f2-05542786b617 is skipped, element [dbo].[rest_holidays].[Id] (SqlSimpleColumn) will not be renamed to id';


GO
PRINT N'Rename refactoring operation with key c6f145e9-52d5-4729-8e11-4890e5de8fa6 is skipped, element [dbo].[rest_holidays].[deelter_sid] (SqlSimpleColumn) will not be renamed to deleter_sid';


GO
PRINT N'Creating [dbo].[budget]...';


GO
CREATE TABLE [dbo].[budget] (
    [id]          INT            IDENTITY (1, 1) NOT NULL,
    [name]        NVARCHAR (500) NOT NULL,
    [dattim1]     DATETIME       NOT NULL,
    [dattim2]     DATETIME       NOT NULL,
    [enabled]     BIT            NOT NULL,
    [creator_sid] VARCHAR (46)   NOT NULL,
    [order_num]   INT            NOT NULL,
    [descr]       NVARCHAR (MAX) NULL,
    [deleter_sid] VARCHAR (46)   NULL,
    [id_parent]   INT            NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[cities]...';


GO
CREATE TABLE [dbo].[cities] (
    [id]          INT           IDENTITY (1, 1) NOT NULL,
    [name]        NVARCHAR (50) NOT NULL,
    [enabled]     BIT           NOT NULL,
    [dattim1]     DATETIME      NOT NULL,
    [dattim2]     DATETIME      NOT NULL,
    [order_num]   INT           NOT NULL,
    [creator_sid] VARCHAR (46)  NULL,
    [sys_name]    NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[departments]...';


GO
CREATE TABLE [dbo].[departments] (
    [id]          INT            IDENTITY (1, 1) NOT NULL,
    [name]        NVARCHAR (150) NOT NULL,
    [id_parent]   INT            NOT NULL,
    [enabled]     BIT            NOT NULL,
    [dattim1]     DATETIME       NOT NULL,
    [dattim2]     DATETIME       NOT NULL,
    [id_chief]    INT            NOT NULL,
    [creator_sid] VARCHAR (46)   NULL,
    [hidden]      BIT            NOT NULL,
    [sys_name]    NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[departments].[IX_departments_id_parent]...';


GO
CREATE NONCLUSTERED INDEX [IX_departments_id_parent]
    ON [dbo].[departments]([id_parent] ASC);


GO
PRINT N'Creating [dbo].[document_meet_links]...';


GO
CREATE TABLE [dbo].[document_meet_links] (
    [id]            INT          IDENTITY (1, 1) NOT NULL,
    [id_document]   INT          NOT NULL,
    [id_department] INT          NULL,
    [id_position]   INT          NULL,
    [id_employee]   INT          NULL,
    [dattim1]       DATETIME     NOT NULL,
    [creator_sid]   VARCHAR (46) NOT NULL,
    [enabled]       BIT          NOT NULL,
    [dattim2]       DATETIME     NOT NULL,
    [deleter_sid]   VARCHAR (46) NULL,
    CONSTRAINT [PK_document_links] PRIMARY KEY CLUSTERED ([id] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[document_meets]...';


GO
CREATE TABLE [dbo].[document_meets] (
    [id]               INT          IDENTITY (1, 1) NOT NULL,
    [id_doc_meet_link] INT          NOT NULL,
    [employee_sid]     VARCHAR (46) NOT NULL,
    [dattim1]          DATETIME     NOT NULL,
    CONSTRAINT [PK_document_meets] PRIMARY KEY CLUSTERED ([id] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[documents]...';


GO
CREATE TABLE [dbo].[documents] (
    [id]          INT                        IDENTITY (1, 1) NOT NULL,
    [data_sid]    UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [summary]     VARBINARY (MAX)            NULL,
    [data]        VARBINARY (MAX) FILESTREAM NULL,
    [name]        NVARCHAR (500)             NOT NULL,
    [dattim1]     DATETIME                   NOT NULL,
    [dattim2]     DATETIME                   NOT NULL,
    [enabled]     BIT                        NOT NULL,
    [creator_sid] VARCHAR (46)               NOT NULL,
    [deleter_sid] VARCHAR (46)               NULL,
    CONSTRAINT [PK_documents] PRIMARY KEY CLUSTERED ([id] ASC) ON [PRIMARY],
    CONSTRAINT [UQ__document__CC80C6D41F98B2C1] UNIQUE NONCLUSTERED ([data_sid] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[employee_import]...';


GO
CREATE TABLE [dbo].[employee_import] (
    [id]            INT            NOT NULL,
    [full_name_rod] NVARCHAR (150) NULL,
    [full_name_dat] NVARCHAR (150) NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[employee_states]...';


GO
CREATE TABLE [dbo].[employee_states] (
    [id]              INT           NOT NULL,
    [name]            NVARCHAR (50) NOT NULL,
    [sys_name]        NVARCHAR (50) NOT NULL,
    [enabled]         BIT           NOT NULL,
    [dattim1]         DATETIME      NOT NULL,
    [dattim2]         DATETIME      NOT NULL,
    [display_in_list] BIT           NOT NULL,
    [order_num]       INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[employees]...';


GO
CREATE TABLE [dbo].[employees] (
    [id]               INT            IDENTITY (1, 1) NOT NULL,
    [ad_sid]           VARCHAR (46)   NOT NULL,
    [id_manager]       INT            NOT NULL,
    [surname]          NVARCHAR (50)  NOT NULL,
    [name]             NVARCHAR (50)  NOT NULL,
    [patronymic]       NVARCHAR (50)  NULL,
    [full_name]        NVARCHAR (150) NOT NULL,
    [display_name]     NVARCHAR (100) NOT NULL,
    [id_position]      INT            NOT NULL,
    [id_organization]  INT            NOT NULL,
    [email]            NVARCHAR (150) NULL,
    [work_num]         NVARCHAR (50)  NULL,
    [mobil_num]        NVARCHAR (50)  NULL,
    [id_emp_state]     SMALLINT       NOT NULL,
    [id_department]    INT            NOT NULL,
    [id_city]          INT            NOT NULL,
    [enabled]          BIT            NOT NULL,
    [dattim1]          DATETIME       NOT NULL,
    [dattim2]          DATETIME       NOT NULL,
    [date_came]        DATE           NULL,
    [birth_date]       DATE           NULL,
    [male]             BIT            NOT NULL,
    [id_position_org]  INT            NOT NULL,
    [has_ad_account]   BIT            NOT NULL,
    [creator_sid]      VARCHAR (46)   NULL,
    [ad_login]         NVARCHAR (50)  NULL,
    [date_fired]       DATE           NULL,
    [full_name_dat]    NVARCHAR (150) NULL,
    [full_name_rod]    NVARCHAR (150) NULL,
    [newvbie_delivery] BIT            NOT NULL,
    [id_budget]        INT            NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[employees].[IX_employee_id_department]...';


GO
CREATE NONCLUSTERED INDEX [IX_employee_id_department]
    ON [dbo].[employees]([id_department] ASC);


GO
PRINT N'Creating [dbo].[employees].[IX_employee_id_manager]...';


GO
CREATE NONCLUSTERED INDEX [IX_employee_id_manager]
    ON [dbo].[employees]([id_manager] ASC);


GO
PRINT N'Creating [dbo].[employees].[IX_employee_ad_sid]...';


GO
CREATE NONCLUSTERED INDEX [IX_employee_ad_sid]
    ON [dbo].[employees]([ad_sid] ASC);


GO
PRINT N'Creating [dbo].[employees].[IX_employee_id_emp_state]...';


GO
CREATE NONCLUSTERED INDEX [IX_employee_id_emp_state]
    ON [dbo].[employees]([id_emp_state] ASC);


GO
PRINT N'Creating [dbo].[employees].[IX_employee_enabled]...';


GO
CREATE NONCLUSTERED INDEX [IX_employee_enabled]
    ON [dbo].[employees]([enabled] DESC);


GO
PRINT N'Creating [dbo].[holiday_work_confirms]...';


GO
CREATE TABLE [dbo].[holiday_work_confirms] (
    [id]             INT            IDENTITY (1, 1) NOT NULL,
    [employee_sid]   VARCHAR (46)   NULL,
    [id_hw_document] INT            NULL,
    [dattim1]        DATETIME       NOT NULL,
    [full_name]      NVARCHAR (150) NOT NULL,
    [enabled]        BIT            NOT NULL,
    CONSTRAINT [PK_holiday_work_confirms] PRIMARY KEY CLUSTERED ([id] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[holiday_work_documents]...';


GO
CREATE TABLE [dbo].[holiday_work_documents] (
    [id]          INT          IDENTITY (1, 1) NOT NULL,
    [dattim1]     DATETIME     NOT NULL,
    [enabled]     BIT          NOT NULL,
    [date_start]  DATE         NOT NULL,
    [date_end]    DATE         NOT NULL,
    [creator_sid] VARCHAR (46) NOT NULL,
    CONSTRAINT [PK_holiday_work_delivery] PRIMARY KEY CLUSTERED ([id] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[languages]...';


GO
CREATE TABLE [dbo].[languages] (
    [id]        INT           NOT NULL,
    [name]      NVARCHAR (50) NOT NULL,
    [order_num] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[org_state_images]...';


GO
CREATE TABLE [dbo].[org_state_images] (
    [id]              INT                        IDENTITY (1, 1) NOT NULL,
    [id_organization] INT                        NOT NULL,
    [data]            VARBINARY (MAX) FILESTREAM NOT NULL,
    [enabled]         BIT                        NOT NULL,
    [data_sid]        UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [dattim1]         DATETIME                   NOT NULL,
    [dattim2]         DATETIME                   NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([data_sid] ASC)
);


GO
PRINT N'Creating [dbo].[organizations]...';


GO
CREATE TABLE [dbo].[organizations] (
    [id]                   INT            IDENTITY (1, 1) NOT NULL,
    [name]                 NVARCHAR (150) NOT NULL,
    [enabled]              BIT            NOT NULL,
    [dattim1]              DATETIME       NOT NULL,
    [dattim2]              DATETIME       NOT NULL,
    [display_in_list]      BIT            NOT NULL,
    [full_name]            NVARCHAR (500) NULL,
    [order_num]            INT            NOT NULL,
    [creator_sid]          VARCHAR (46)   NULL,
    [address_ur]           NVARCHAR (500) NULL,
    [address_fact]         NVARCHAR (500) NULL,
    [phone]                NVARCHAR (50)  NULL,
    [email]                NVARCHAR (50)  NULL,
    [inn]                  NVARCHAR (12)  NULL,
    [kpp]                  NVARCHAR (20)  NULL,
    [ogrn]                 NVARCHAR (20)  NULL,
    [rs]                   NVARCHAR (50)  NULL,
    [bank]                 NVARCHAR (500) NULL,
    [ks]                   NVARCHAR (50)  NULL,
    [bik]                  NVARCHAR (50)  NULL,
    [okpo]                 NVARCHAR (50)  NULL,
    [okved]                NVARCHAR (50)  NULL,
    [manager_name]         NVARCHAR (150) NULL,
    [manager_name_dat]     NVARCHAR (150) NULL,
    [manager_position]     NVARCHAR (250) NULL,
    [manager_position_dat] NVARCHAR (250) NULL,
    [site]                 NVARCHAR (50)  NULL,
    [director_sid]         VARCHAR (46)   NULL,
    [sys_name]             NVARCHAR (50)  NULL,
    [id_director]          INT            NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[photos]...';


GO
CREATE TABLE [dbo].[photos] (
    [id]           INT             IDENTITY (1, 1) NOT NULL,
    [id_employee]  INT             NOT NULL,
    [enabled]      BIT             NOT NULL,
    [dattim1]      DATETIME        NOT NULL,
    [dattim2]      DATETIME        NOT NULL,
    [path]         NVARCHAR (4000) NULL,
    [picture]      IMAGE           NULL,
    [picture_name] NVARCHAR (100)  NULL,
    [creator_sid]  VARCHAR (46)    NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[photos].[IX_photos_id_employee]...';


GO
CREATE NONCLUSTERED INDEX [IX_photos_id_employee]
    ON [dbo].[photos]([id_employee] ASC);


GO
PRINT N'Creating [dbo].[position_import]...';


GO
CREATE TABLE [dbo].[position_import] (
    [id]       INT            NOT NULL,
    [name_dat] NVARCHAR (500) NULL,
    [name_rod] NVARCHAR (500) NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[positions]...';


GO
CREATE TABLE [dbo].[positions] (
    [id]          INT            IDENTITY (1, 1) NOT NULL,
    [name]        NVARCHAR (500) NOT NULL,
    [enabled]     BIT            NOT NULL,
    [dattim1]     DATETIME       NOT NULL,
    [dattim2]     DATETIME       NOT NULL,
    [order_num]   INT            NOT NULL,
    [creator_sid] VARCHAR (46)   NULL,
    [name_rod]    NVARCHAR (500) NULL,
    [name_dat]    NVARCHAR (500) NULL,
    [sys_name]    NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[rest_holidays]...';


GO
CREATE TABLE [dbo].[rest_holidays] (
    [id]                   INT           IDENTITY (1, 1) NOT NULL,
    [employee_sid]         VARCHAR (46)  NOT NULL,
    [start_date]           DATETIME      NOT NULL,
    [end_date]             DATETIME      NOT NULL,
    [duration]             INT           NOT NULL,
    [can_edit]             BIT           NOT NULL,
    [dattim1]              DATETIME      NOT NULL,
    [dattim2]              DATETIME      NOT NULL,
    [creator_sid]          VARCHAR (46)  NOT NULL,
    [deleter_sid]          NVARCHAR (46) NULL,
    [enabled]              BIT           NOT NULL,
    [year]                 INT           NULL,
    [confirmed]            BIT           NOT NULL,
    [confirmator_sid]      VARCHAR (46)  NULL,
    [can_edit_creator_sid] VARCHAR (46)  NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[vendor_state_pictures]...';


GO
CREATE TABLE [dbo].[vendor_state_pictures] (
    [id]              INT                        IDENTITY (1, 1) NOT NULL,
    [id_vendor_state] INT                        NOT NULL,
    [file_data]       VARBINARY (MAX) FILESTREAM NOT NULL,
    [enabled]         BIT                        NOT NULL,
    [file_fuid]       UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [file_name]       NVARCHAR (500)             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([file_fuid] ASC)
);


GO
PRINT N'Creating [dbo].[vendor_states]...';


GO
CREATE TABLE [dbo].[vendor_states] (
    [id]                    INT                        IDENTITY (1, 1) NOT NULL,
    [id_vendor]             INT                        NOT NULL,
    [descr]                 NVARCHAR (MAX)             NULL,
    [date_end]              DATETIME                   NOT NULL,
    [id_organization]       INT                        NOT NULL,
    [id_language]           INT                        NOT NULL,
    [dattim1]               DATETIME                   NOT NULL,
    [dattim2]               DATETIME                   NOT NULL,
    [enabled]               BIT                        NOT NULL,
    [creator_sid]           VARCHAR (46)               NOT NULL,
    [deleter_sid]           VARCHAR (46)               NULL,
    [old_id]                INT                        NULL,
    [pic_data]              VARBINARY (MAX) FILESTREAM NULL,
    [pic_guid]              UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [expired_delivery_sent] BIT                        NOT NULL,
    [name]                  NVARCHAR (150)             NULL,
    [new_delivery_sent]     BIT                        NOT NULL,
    [update_delivery_sent]  BIT                        NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([pic_guid] ASC)
);


GO
PRINT N'Creating [dbo].[vendors]...';


GO
CREATE TABLE [dbo].[vendors] (
    [id]          INT            IDENTITY (1, 1) NOT NULL,
    [name]        NVARCHAR (150) NOT NULL,
    [dattim1]     DATETIME       NOT NULL,
    [dattim2]     DATETIME       NOT NULL,
    [creator_sid] VARCHAR (46)   NOT NULL,
    [deleter_sid] VARCHAR (46)   NULL,
    [enabled]     BIT            NOT NULL,
    [descr]       NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[wd_holidays]...';


GO
CREATE TABLE [dbo].[wd_holidays] (
    [date] DATE NOT NULL,
    CONSTRAINT [PK_wd_holidays] PRIMARY KEY CLUSTERED ([date] ASC)
);


GO
PRINT N'Creating [dbo].[wd_short_days]...';


GO
CREATE TABLE [dbo].[wd_short_days] (
    [date] DATE NOT NULL,
    CONSTRAINT [PK_wd_short_days] PRIMARY KEY CLUSTERED ([date] ASC)
);


GO
PRINT N'Creating [dbo].[wd_work_holidays]...';


GO
CREATE TABLE [dbo].[wd_work_holidays] (
    [date] DATE NOT NULL,
    CONSTRAINT [PK_wd_work_holidays] PRIMARY KEY CLUSTERED ([date] ASC)
);


GO
PRINT N'Creating [dbo].[work_days]...';


GO
CREATE TABLE [dbo].[work_days] (
    [date]       DATE NOT NULL,
    [work_hours] INT  NOT NULL,
    CONSTRAINT [PK_work_days] PRIMARY KEY CLUSTERED ([date] ASC)
);


GO
PRINT N'Creating [dbo].[work_hours]...';


GO
CREATE TABLE [dbo].[work_hours] (
    [id_time]  INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [time]     TIME (0)       NOT NULL,
    [sys_name] NVARCHAR (150) NULL,
    CONSTRAINT [PK_work_hours] PRIMARY KEY CLUSTERED ([id_time] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[budget]...';


GO
ALTER TABLE [dbo].[budget]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[budget]...';


GO
ALTER TABLE [dbo].[budget]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[budget]...';


GO
ALTER TABLE [dbo].[budget]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[budget]...';


GO
ALTER TABLE [dbo].[budget]
    ADD DEFAULT 500 FOR [order_num];


GO
PRINT N'Creating unnamed constraint on [dbo].[cities]...';


GO
ALTER TABLE [dbo].[cities]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[cities]...';


GO
ALTER TABLE [dbo].[cities]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[cities]...';


GO
ALTER TABLE [dbo].[cities]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[cities]...';


GO
ALTER TABLE [dbo].[cities]
    ADD DEFAULT 500 FOR [order_num];


GO
PRINT N'Creating unnamed constraint on [dbo].[departments]...';


GO
ALTER TABLE [dbo].[departments]
    ADD DEFAULT 0 FOR [id_parent];


GO
PRINT N'Creating unnamed constraint on [dbo].[departments]...';


GO
ALTER TABLE [dbo].[departments]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[departments]...';


GO
ALTER TABLE [dbo].[departments]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[departments]...';


GO
ALTER TABLE [dbo].[departments]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[departments]...';


GO
ALTER TABLE [dbo].[departments]
    ADD DEFAULT 0 FOR [id_chief];


GO
PRINT N'Creating unnamed constraint on [dbo].[departments]...';


GO
ALTER TABLE [dbo].[departments]
    ADD DEFAULT 0 FOR [hidden];


GO
PRINT N'Creating [dbo].[DF_document_links_dattim1]...';


GO
ALTER TABLE [dbo].[document_meet_links]
    ADD CONSTRAINT [DF_document_links_dattim1] DEFAULT (getdate()) FOR [dattim1];


GO
PRINT N'Creating [dbo].[DF_document_meet_links_enabled]...';


GO
ALTER TABLE [dbo].[document_meet_links]
    ADD CONSTRAINT [DF_document_meet_links_enabled] DEFAULT ((1)) FOR [enabled];


GO
PRINT N'Creating [dbo].[DF_document_meet_links_dattim2]...';


GO
ALTER TABLE [dbo].[document_meet_links]
    ADD CONSTRAINT [DF_document_meet_links_dattim2] DEFAULT ('3.3.3333') FOR [dattim2];


GO
PRINT N'Creating [dbo].[DF_document_meets_dattim1]...';


GO
ALTER TABLE [dbo].[document_meets]
    ADD CONSTRAINT [DF_document_meets_dattim1] DEFAULT (getdate()) FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[documents]...';


GO
ALTER TABLE [dbo].[documents]
    ADD DEFAULT newid() FOR [data_sid];


GO
PRINT N'Creating [dbo].[DF_documents_dattim1]...';


GO
ALTER TABLE [dbo].[documents]
    ADD CONSTRAINT [DF_documents_dattim1] DEFAULT (getdate()) FOR [dattim1];


GO
PRINT N'Creating [dbo].[DF_documents_dattim2]...';


GO
ALTER TABLE [dbo].[documents]
    ADD CONSTRAINT [DF_documents_dattim2] DEFAULT ('3.3.3333') FOR [dattim2];


GO
PRINT N'Creating [dbo].[DF_documents_enabled]...';


GO
ALTER TABLE [dbo].[documents]
    ADD CONSTRAINT [DF_documents_enabled] DEFAULT ((1)) FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[employee_states]...';


GO
ALTER TABLE [dbo].[employee_states]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[employee_states]...';


GO
ALTER TABLE [dbo].[employee_states]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[employee_states]...';


GO
ALTER TABLE [dbo].[employee_states]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[employee_states]...';


GO
ALTER TABLE [dbo].[employee_states]
    ADD DEFAULT 1 FOR [display_in_list];


GO
PRINT N'Creating unnamed constraint on [dbo].[employee_states]...';


GO
ALTER TABLE [dbo].[employee_states]
    ADD DEFAULT 500 FOR [order_num];


GO
PRINT N'Creating unnamed constraint on [dbo].[employees]...';


GO
ALTER TABLE [dbo].[employees]
    ADD DEFAULT '' FOR [ad_sid];


GO
PRINT N'Creating unnamed constraint on [dbo].[employees]...';


GO
ALTER TABLE [dbo].[employees]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[employees]...';


GO
ALTER TABLE [dbo].[employees]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[employees]...';


GO
ALTER TABLE [dbo].[employees]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[employees]...';


GO
ALTER TABLE [dbo].[employees]
    ADD DEFAULT 1 FOR [male];


GO
PRINT N'Creating unnamed constraint on [dbo].[employees]...';


GO
ALTER TABLE [dbo].[employees]
    ADD DEFAULT 0 FOR [has_ad_account];


GO
PRINT N'Creating unnamed constraint on [dbo].[employees]...';


GO
ALTER TABLE [dbo].[employees]
    ADD DEFAULT 0 FOR [newvbie_delivery];


GO
PRINT N'Creating unnamed constraint on [dbo].[holiday_work_confirms]...';


GO
ALTER TABLE [dbo].[holiday_work_confirms]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating [dbo].[DF_holiday_work_confirms_dattim1]...';


GO
ALTER TABLE [dbo].[holiday_work_confirms]
    ADD CONSTRAINT [DF_holiday_work_confirms_dattim1] DEFAULT (getdate()) FOR [dattim1];


GO
PRINT N'Creating [dbo].[DF_holiday_work_delivery_dattim1]...';


GO
ALTER TABLE [dbo].[holiday_work_documents]
    ADD CONSTRAINT [DF_holiday_work_delivery_dattim1] DEFAULT (getdate()) FOR [dattim1];


GO
PRINT N'Creating [dbo].[DF_holiday_work_delivery_enabled]...';


GO
ALTER TABLE [dbo].[holiday_work_documents]
    ADD CONSTRAINT [DF_holiday_work_delivery_enabled] DEFAULT ((1)) FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[languages]...';


GO
ALTER TABLE [dbo].[languages]
    ADD DEFAULT 500 FOR [order_num];


GO
PRINT N'Creating unnamed constraint on [dbo].[org_state_images]...';


GO
ALTER TABLE [dbo].[org_state_images]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[org_state_images]...';


GO
ALTER TABLE [dbo].[org_state_images]
    ADD DEFAULT newid() FOR [data_sid];


GO
PRINT N'Creating unnamed constraint on [dbo].[org_state_images]...';


GO
ALTER TABLE [dbo].[org_state_images]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[org_state_images]...';


GO
ALTER TABLE [dbo].[org_state_images]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[organizations]...';


GO
ALTER TABLE [dbo].[organizations]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[organizations]...';


GO
ALTER TABLE [dbo].[organizations]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[organizations]...';


GO
ALTER TABLE [dbo].[organizations]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[organizations]...';


GO
ALTER TABLE [dbo].[organizations]
    ADD DEFAULT 1 FOR [display_in_list];


GO
PRINT N'Creating unnamed constraint on [dbo].[organizations]...';


GO
ALTER TABLE [dbo].[organizations]
    ADD DEFAULT 500 FOR [order_num];


GO
PRINT N'Creating unnamed constraint on [dbo].[photos]...';


GO
ALTER TABLE [dbo].[photos]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[photos]...';


GO
ALTER TABLE [dbo].[photos]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[photos]...';


GO
ALTER TABLE [dbo].[photos]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[positions]...';


GO
ALTER TABLE [dbo].[positions]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[positions]...';


GO
ALTER TABLE [dbo].[positions]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[positions]...';


GO
ALTER TABLE [dbo].[positions]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[positions]...';


GO
ALTER TABLE [dbo].[positions]
    ADD DEFAULT 500 FOR [order_num];


GO
PRINT N'Creating unnamed constraint on [dbo].[rest_holidays]...';


GO
ALTER TABLE [dbo].[rest_holidays]
    ADD DEFAULT 1 FOR [can_edit];


GO
PRINT N'Creating unnamed constraint on [dbo].[rest_holidays]...';


GO
ALTER TABLE [dbo].[rest_holidays]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[rest_holidays]...';


GO
ALTER TABLE [dbo].[rest_holidays]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[rest_holidays]...';


GO
ALTER TABLE [dbo].[rest_holidays]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[rest_holidays]...';


GO
ALTER TABLE [dbo].[rest_holidays]
    ADD DEFAULT 0 FOR [confirmed];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendor_state_pictures]...';


GO
ALTER TABLE [dbo].[vendor_state_pictures]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendor_state_pictures]...';


GO
ALTER TABLE [dbo].[vendor_state_pictures]
    ADD DEFAULT newid() FOR [file_fuid];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendor_states]...';


GO
ALTER TABLE [dbo].[vendor_states]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendor_states]...';


GO
ALTER TABLE [dbo].[vendor_states]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendor_states]...';


GO
ALTER TABLE [dbo].[vendor_states]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendor_states]...';


GO
ALTER TABLE [dbo].[vendor_states]
    ADD DEFAULT newid() FOR [pic_guid];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendor_states]...';


GO
ALTER TABLE [dbo].[vendor_states]
    ADD DEFAULT 0 FOR [expired_delivery_sent];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendor_states]...';


GO
ALTER TABLE [dbo].[vendor_states]
    ADD DEFAULT 0 FOR [new_delivery_sent];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendor_states]...';


GO
ALTER TABLE [dbo].[vendor_states]
    ADD DEFAULT 1 FOR [update_delivery_sent];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendors]...';


GO
ALTER TABLE [dbo].[vendors]
    ADD DEFAULT getdate() FOR [dattim1];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendors]...';


GO
ALTER TABLE [dbo].[vendors]
    ADD DEFAULT '3.3.3333' FOR [dattim2];


GO
PRINT N'Creating unnamed constraint on [dbo].[vendors]...';


GO
ALTER TABLE [dbo].[vendors]
    ADD DEFAULT 1 FOR [enabled];


GO
PRINT N'Creating [dbo].[SplitInt]...';


GO
create function [dbo].[SplitInt]
(
    @value varchar(max),
    @delimiter nvarchar(10)
)
returns @SplittedValues table
(
    value int
)
as
begin
    declare @SplitLength int
    
    while len(@value) > 0
    begin 
        select @SplitLength = (case charindex(@delimiter,@value) when 0 then
            len(@value) else charindex(@delimiter,@value) -1 end)
 
        insert into @SplittedValues
        select cast(substring(@value,1,@SplitLength) as int)
    
        select @value = (case (len(@value) - @SplitLength) when 0 then  ''
            else right(@value, len(@value) - @SplitLength - 1) end)
    end 
return  
end
GO
PRINT N'Creating [dbo].[departments_view]...';


GO
CREATE VIEW [dbo].[departments_view]
	AS SELECT  id ,
                name ,
                id_parent ,
                ( SELECT    name
                  FROM      departments d2
                  WHERE     d2.id = d.id_parent
                ) AS parent ,
                id_chief ,
                ( SELECT    display_name
                  FROM      employees e
                  WHERE     e.id = d.id_chief
                ) AS chief,
				case when d.hidden = 1 then 1 else 0 end as hidden
        FROM    departments d
        WHERE   d.enabled = 1
GO
PRINT N'Creating [dbo].[employees_report]...';


GO
CREATE VIEW [dbo].[employees_report]
	AS SELECT  e.id ,
                ad_sid ,
                id_manager ,
                surname ,
                e.name ,
                patronymic ,
                e.full_name ,
                display_name ,
                id_position ,
                id_organization ,
                e.email ,
                work_num ,
                mobil_num ,
                id_emp_state ,
                id_department ,
                id_city ,
                date_came ,
                birth_date ,
                ( SELECT    e2.display_name
                  FROM      employees e2
                  WHERE     e2.id = e.id_manager
                ) AS manager,
                ( SELECT    e2.email
                  FROM      employees e2
                  WHERE     e2.id = e.id_manager
                ) AS manager_email ,
                es.name AS emp_state ,
				es.sys_name as emp_state_sys_name,
                p.name AS position ,
                o.name AS organization ,
                c.name AS city ,
                d.name AS department ,
				case when male=1 then 1 else 0 end as male,
				id_position_org,
				p_org.name as position_org,
				CASE WHEN e.has_ad_account = 1 THEN 1 ELSE 0 END AS has_ad_account,
				ad_login,
				e.dattim1 as date_create,
				case when ad_login is not null then ad_login else replace(e.email, '@unitgroup.ru', '') end as logon_name
        FROM    employees e
                INNER JOIN employee_states es ON e.id_emp_state = es.id
                INNER JOIN positions p ON e.id_position = p.id
				INNER JOIN positions p_org ON e.id_position_org = p_org.id
                INNER JOIN organizations o ON e.id_organization = o.id
                INNER JOIN cities c ON e.id_city = c.id
                INNER JOIN departments d ON e.id_department = d.id
        WHERE   e.enabled = 1
GO
PRINT N'Creating [dbo].[employees_view]...';


GO
CREATE VIEW [dbo].[employees_view]
	AS SELECT  e.id ,
                ad_sid ,
                id_manager ,
                surname ,
                e.name ,
                patronymic ,
                e.full_name ,
                display_name ,
                id_position ,
                id_organization ,
                e.email ,
                work_num ,
                mobil_num ,
                id_emp_state ,
                id_department ,
                id_city ,
                date_came ,
                birth_date ,
                ( SELECT    e2.display_name
                  FROM      employees e2
                  WHERE     e2.id = e.id_manager
                ) AS manager,
                ( SELECT    e2.email
                  FROM      employees e2
                  WHERE     e2.id = e.id_manager
                ) AS manager_email ,
                es.name AS emp_state ,
				es.sys_name as emp_state_sys_name,
                p.name AS position ,
                o.name AS organization ,
                c.name AS city ,
                d.name AS department ,
				case when male=1 then 1 else 0 end as male,
				id_position_org,
				p_org.name as position_org,
				CASE WHEN e.has_ad_account = 1 THEN 1 ELSE 0 END AS has_ad_account,
				ad_login,
				e.dattim1 as date_create,
				case when d.hidden=1 then 1 else 0 end as is_hidden,
				e.newvbie_delivery,
				d.sys_name as dep_sys_name,
				p.sys_name as pos_sys_name,
				e.full_name_dat,
				e.full_name_rod,
				e.id_budget,
				CASE WHEN e.id_department IS NOT NULL THEN 
				CASE WHEN EXISTS(SELECT 1 FROM departments dd WHERE dd.enabled=1 and dd.id_chief=e.id) THEN 1 ELSE 0 end
				ELSE NULL END AS is_chief 
        FROM    employees e
                INNER JOIN employee_states es ON e.id_emp_state = es.id
                INNER JOIN positions p ON e.id_position = p.id
				INNER JOIN positions p_org ON e.id_position_org = p_org.id
                INNER JOIN organizations o ON e.id_organization = o.id
                INNER JOIN cities c ON e.id_city = c.id
                INNER JOIN departments d ON e.id_department = d.id
        WHERE   e.enabled = 1 and es.sys_name IN ( 'STUFF' )
GO
PRINT N'Creating [dbo].[check_employee_is_chief]...';


GO
CREATE PROCEDURE [dbo].[check_employee_is_chief]
	@id_employee int,
	@id_department int
AS
begin
set nocount on;
	select (case when exists(select 1 from departments d where d.id = @id_department and d.id_chief = @id_employee) then 1 else 0 end) as result
end
GO
PRINT N'Creating [dbo].[check_is_work_day]...';


GO
CREATE PROCEDURE [dbo].[check_is_work_day]
	@date date
AS
begin set nocount on;
	if exists(select 1 from work_days wd where wd.date=@date)
	begin select 1 as result end
	else begin
	select 0 as result
	end
end
GO
PRINT N'Creating [dbo].[check_vendor_state_is_changed]...';


GO
CREATE PROCEDURE [dbo].[check_vendor_state_is_changed]
	@id int
	as begin

	if exists(select 1 
from vendor_states vs inner join vendor_states vs_old on vs.id=vs_old.old_id AND vs_old.id = (SELECT MAX(id) FROM vendor_states old WHERE old.old_id=@id)
where vs.id=@id AND (vs.id_vendor != vs_old.id_vendor or LTRIM(RTRIM(vs.descr))!=RTRIM(LTRIM(vs_old.descr)) 
or vs.date_end!=vs_old.date_end or vs.id_organization != vs_old.id_organization or vs.id_language!=vs_old.id_language or vs.pic_data!=vs_old.pic_data))
begin
select vs_old.*
from vendor_states vs inner join vendor_states vs_old on vs.id=vs_old.old_id AND vs_old.id = (SELECT MAX(id) FROM vendor_states old WHERE old.old_id=@id)
where vs.id=@id 
--AND vs.id_vendor = vs_old.id_vendor AND LTRIM(RTRIM(vs.descr))=RTRIM(LTRIM(vs_old.descr)) AND vs.date_end=vs_old.date_end AND vs.id_organization = vs_old.id_organization AND vs.id_langu
	
end
else begin
	select null
end
	end
GO
PRINT N'Creating [dbo].[close_budget]...';


GO
CREATE PROCEDURE [dbo].[close_budget]
	@id int,
	@deleter_sid varchar(46)
	as begin
	set nocount on;
	update budget
	set dattim2=getdate(), enabled=0, deleter_sid=@deleter_sid
	where id=@id

	end
GO
PRINT N'Creating [dbo].[close_city]...';


GO
CREATE PROCEDURE [dbo].[close_city]@id INT
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE  cities
        SET     enabled = 0, dattim2 = getdate()
        WHERE   id = @id
    END
GO
PRINT N'Creating [dbo].[close_department]...';


GO
CREATE PROCEDURE [dbo].[close_department] @id INT
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE  departments
        SET     enabled = 0, dattim2 = getdate()
        WHERE   id = @id
    END
GO
PRINT N'Creating [dbo].[close_doc_meet_link]...';


GO
CREATE PROCEDURE [dbo].[close_doc_meet_link]
    @id INT = NULL ,
    @id_document INT = NULL ,
    @id_department INT = NULL ,
    @id_position INT = NULL ,
    @id_employee INT = NULL ,
    @deleter_sid VARCHAR(46)
AS
    BEGIN
        SET NOCOUNT ON;

        IF ( @id IS NOT NULL
             AND @id > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id = @id
            END
    
        IF ( @id_document IS NOT NULL
             AND @id_document > 0
             AND @id_department IS NOT NULL
             AND @id_department > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id_document = @id_document
                        AND id_department = @id_department
            END
    
        IF ( @id_document IS NOT NULL
             AND @id_document > 0
             AND @id_position IS NOT NULL
             AND @id_position > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id_document = @id_document
                        AND id_position = @id_position
            END
    
        IF ( @id_document IS NOT NULL
             AND @id_document > 0
             AND @id_employee IS NOT NULL
             AND @id_employee > 0
           )
            BEGIN
                UPDATE  document_meet_links
                SET     ENABLED = 0 ,
                        dattim2 = GETDATE() ,
                        deleter_sid = @deleter_sid
                WHERE   id_document = @id_document
                        AND id_employee = @id_employee
            END
    
    END
GO
PRINT N'Creating [dbo].[close_document]...';


GO
CREATE PROCEDURE [dbo].[close_document] 
	@id int,
	@deleter_sid varchar(46)
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE documents 
    SET ENABLED = 0, dattim2=GETDATE(), deleter_sid = @deleter_sid
    WHERE id=@id
    
    UPDATE document_meet_links
    SET ENABLED = 0, dattim2=GETDATE(), deleter_sid = @deleter_sid
    WHERE ENABLED = 1 and id_document=@id
END
GO
PRINT N'Creating [dbo].[close_employee]...';


GO
CREATE PROCEDURE [dbo].[close_employee] @id INT
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE  employees
        SET     enabled = 0, dattim2 = getdate()
        WHERE   id = @id
    END
GO
PRINT N'Creating [dbo].[close_org_state_image]...';


GO
CREATE PROCEDURE [dbo].[close_org_state_image]@id INT
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE  org_state_images
        SET     enabled = 0, dattim2 = getdate()
        WHERE   id = @id
    END
GO
PRINT N'Creating [dbo].[close_organization]...';


GO
CREATE PROCEDURE [dbo].[close_organization] @id INT
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE  organizations
        SET     enabled = 0, dattim2 = getdate()
        WHERE   id = @id
    END
GO
PRINT N'Creating [dbo].[close_position]...';


GO
CREATE PROCEDURE [dbo].[close_position] @id INT
AS
    BEGIN
        SET NOCOUNT ON;
        UPDATE  positions
        SET     enabled = 0, dattim2 = getdate()
        WHERE   id = @id
    END
GO
PRINT N'Creating [dbo].[close_vendor]...';


GO
CREATE PROCEDURE [dbo].[close_vendor]
	@id int,
	@deleter_sid varchar(46)
AS
	begin set nocount on;

	update vendors
	set enabled=0, dattim2=getdate(), deleter_sid=@deleter_sid
	where id=@id

	end
GO
PRINT N'Creating [dbo].[close_vendor_state]...';


GO
CREATE PROCEDURE [dbo].[close_vendor_state]
	@id int,
	@deleter_sid varchar(46)
	as begin
	set nocount on;
	update vendor_states
	set enabled = 0, dattim2 = getdate(), deleter_sid = @deleter_sid
	where id=@id

	end
GO
PRINT N'Creating [dbo].[fill_work_days]...';


GO
CREATE PROCEDURE [dbo].[fill_work_days]
	--год для которого делаем встаку рабочих дней
    @year INT = NULL , 
--перезаписать дня для года (1 - да, 0 - нет)
    @rewrite BIT = 1
AS
    BEGIN
        SET NOCOUNT ON;
        DECLARE @is_friday_short BIT ,
            @set_oficial_short BIT ,
            @start_date DATE ,
            @end_date DATE ,
            @friday_name NVARCHAR(15) ,
            @saturday_name NVARCHAR(15) ,
            @sunday_name NVARCHAR(15)
	
        SET @is_friday_short = 1
--является ли пятница сокращенным днем
        SET @set_oficial_short = 1
--считать официальные сокращенные дни сокращенными или нет
	
        SET @year = ISNULL(@year, YEAR(GETDATE()))
--текущий год
        SET @start_date = CONVERT(DATE, CONVERT(NVARCHAR, @year)+'-01-01')
        SET @end_date = CONVERT(DATE, CONVERT(NVARCHAR, @year)+'-12-31')
	--т.к. не уверен на каком языке будет выполняться данная функция, то хардкодим пятницу, субботу и воскресенье
        SET @friday_name = DATENAME(weekday, convert(date,'2015-07-24'))
-- точно пятница
        SET @saturday_name = DATENAME(weekday, convert(date,'2015-07-25'))
-- точно суббота
        SET @sunday_name = DATENAME(weekday, convert(date,'2015-07-26'))
-- точно воскресенье

        IF @rewrite = 1
            BEGIN
                DELETE  dbo.work_days
                WHERE   YEAR(date) = @year
            END;
        WITH    sample
                  AS ( SELECT   @start_date AS dt
                       UNION ALL
                       SELECT   DATEADD(dd, 1, dt)
                       FROM     sample s
                       WHERE    DATEADD(dd, 1, dt) <= @end_date
                     )
            INSERT  INTO dbo.work_days
                    ( date ,
                      work_hours
                    )
                    SELECT DISTINCT  t.date , --официальныесокращенные дня из таблицы wd_short_days
                            CASE WHEN ( ( @is_friday_short = 1
                                          AND DATENAME(weekday, t.date) = @friday_name
                                        )
                                        OR @is_friday_short = 0
                                      )
                                      OR ( @set_oficial_short = 1
                                           AND t.date IN (
                                           SELECT   date
                                           FROM     dbo.wd_short_days hd
                                           WHERE    YEAR(hd.date) = @year )
                                           OR @set_oficial_short = 0
                                         ) THEN 7
                                 ELSE 8
                            END AS work_hours
                    FROM    ( SELECT    s.dt AS date
                              FROM      sample s
                              WHERE     --исключаем праздники (таблица wd_holidays)
                                        s.dt NOT IN (
                                        SELECT  date
                                        FROM    dbo.wd_holidays hd
                                        WHERE   YEAR(hd.date) = @year )
  --исключаем субботы и воскресения, кроме рабочих в таблице wd_work_holidays
                                        AND DATENAME(weekday, s.dt) NOT IN (
                                        @saturday_name, @sunday_name )
            
            --добавляем официальные рабочие выходные
                              UNION ALL
                              SELECT    date
                              FROM      dbo.wd_work_holidays wh
                              WHERE     YEAR(wh.date) = @year
                            ) AS t
                    ORDER BY t.date
            OPTION  ( MAXRECURSION 0 )
    END
GO
PRINT N'Creating [dbo].[get_budget]...';


GO
CREATE PROCEDURE [dbo].[get_budget]
	@id int
AS
begin
set nocount on;
	select id, name, descr, creator_sid, id_parent
	from budget
	where id=@id
end
GO
PRINT N'Creating [dbo].[get_budget_list]...';


GO
CREATE PROCEDURE [dbo].[get_budget_list]
AS
begin
set nocount on;
	select b.id, b.name, b.descr, b.creator_sid, (select count (1) from employees_view e where e.id_budget=b.id) as emp_count, b.id_parent
	from budget b
	where b.enabled=1
	order by b.name
end
GO
PRINT N'Creating [dbo].[get_city]...';


GO
CREATE PROCEDURE [dbo].[get_city]
	@id int = null,
	@sys_name nvarchar(50) = null	
AS
begin
SET NOCOUNT ON;
	select id, name,
	(
	select count(1) from employees_view e  where e.id_city=c.id
	) as emp_count
	 from cities c
	where c.enabled=1
	AND ( @id IS NULL
                      OR ( @id IS NOT NULL
                           AND @id > 0
                           AND c.id = @id
                         )
                    )
AND ( @sys_name IS NULL or @sys_name = ''
                      OR ( @sys_name IS NOT NULL
                           AND @sys_name != ''
                           AND c.sys_name = @sys_name
                         )
                    )
					order by name
end
GO
PRINT N'Creating [dbo].[get_city_link_count]...';


GO
CREATE PROCEDURE [dbo].[get_city_link_count]
(
	@id int
)
AS
BEGIN
	select count(1) from employees_view e where e.id_city=@id
END
GO
PRINT N'Creating [dbo].[get_department]...';


GO
CREATE PROCEDURE [dbo].[get_department] @id INT = NULL, @get_emp_count BIT = 0, @has_ad_account bit = null
AS
    BEGIN
        SET NOCOUNT ON;
        SELECT  id ,
                name ,
                id_parent ,
                parent ,
                id_chief ,
                chief,
				CASE WHEN @get_emp_count = 1 THEN 
				(SELECT COUNT(1) FROM employees_view e WHERE e.id_department = d.id and (@has_ad_account is null or (@has_ad_account is not null and e.has_ad_account = @has_ad_account)))
				 ELSE NULL END AS emp_count,
				 hidden
        FROM    departments_view d
        WHERE   ( @id IS NULL
                      OR ( @id IS NOT NULL
                           AND @id > 0
                           AND d.id = @id
                         )
                    )
					order by d.name
    END
GO
PRINT N'Creating [dbo].[get_doc_meet_link_list]...';


GO
CREATE PROCEDURE [dbo].[get_doc_meet_link_list]
	@id_document int
AS
begin
set nocount on;
	select id_department, id_position, id_employee from document_meet_links
	where enabled=1 and id_document=@id_document
end
GO
PRINT N'Creating [dbo].[get_document_data]...';


GO
CREATE PROCEDURE [dbo].[get_document_data]
	@sid varchar(46)
AS
begin
set nocount on;
select data from documents where data_sid=@sid
end
GO
PRINT N'Creating [dbo].[get_document_list]...';


GO
CREATE PROCEDURE [dbo].[get_document_list]	 
	@id_department INT = NULL,
	@id_position INT = NULL,
	@id_employee INT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	with deps as (
   select id, id_parent
   from dbo.departments
   where id = @id_department
   union all
   select c.id, c.id_parent
   from departments c
     join deps p on p.id_parent = c.id 
) 


	SELECT d.id, d.NAME, d.data_sid
	FROM documents d 
	WHERE d.ENABLED = 1 AND 
((@id_department IS NULL OR @id_department <= 0 OR (@id_department IS NOT NULL AND @id_department > 0 AND EXISTS(SELECT 1 FROM document_meet_links dml WHERE dml.enabled=1 and dml.id_document = d.id AND dml.id_department in (select id
from deps))))

or 
	(@id_position IS NULL OR @id_position <= 0 OR (@id_position IS NOT NULL AND @id_position > 0 AND EXISTS(SELECT 1 FROM document_meet_links dml WHERE dml.enabled=1 and dml.id_document = d.id AND dml.id_position = @id_position)))

or 
	(@id_employee IS NULL OR @id_employee <= 0 OR (@id_employee IS NOT NULL AND @id_employee > 0 AND EXISTS(SELECT 1 FROM document_meet_links dml WHERE dml.enabled=1 and dml.id_document = d.id AND dml.id_employee = @id_employee)))
	)	order by d.name		
END
GO
PRINT N'Creating [dbo].[get_email]...';


GO
CREATE PROCEDURE [dbo].[get_email]
	@full_name nvarchar(150) = null,
	@sid varchar(46) = null
	as begin set nocount on;
	select top 1 email from employees_view e where (@full_name is null or @full_name ='' or (@full_name is not null and @full_name <> '' and e.full_name = @full_name))
	and (@sid is null or @sid ='' or (@sid is not null and @sid <> '' and e.ad_sid = @sid))

	end;
GO
PRINT N'Creating [dbo].[get_emp_state]...';


GO
CREATE PROCEDURE [dbo].[get_emp_state]
	@id int = null,
	--@get_all bit = 0,
	@sys_name nvarchar(20) = null
AS
begin
SET NOCOUNT ON;
	select id, name from employee_states es
	where es.enabled=1
	--and (@get_all=1 or (@get_all=0 and es.display_in_list = 1))
	and ((@sys_name is null or ltrim(rtrim(@sys_name)) = '') or (@sys_name is not null and rtrim(ltrim(@sys_name))<>'' and sys_name=@sys_name))
	AND ( @id IS NULL
                      OR ( @id IS NOT NULL
                           AND @id > 0
                           AND es.id = @id
                         )
                    )
end
GO
PRINT N'Creating [dbo].[get_employee]...';


GO
CREATE PROCEDURE [dbo].[get_employee]
    @id INT = NULL ,
    @get_photo BIT = 0 ,
	@ad_sid VARCHAR(46) = NULL
AS
    BEGIN
        SET NOCOUNT ON;
        SELECT  e.id ,
                ad_sid ,
                id_manager ,
                surname ,
                e.name ,
                patronymic ,
                e.full_name ,
                display_name ,
                id_position ,
                id_organization ,
                e.email ,
                work_num ,
                mobil_num ,
                id_emp_state ,
                id_department ,
                id_city ,
                date_came ,
                birth_date ,
                ( SELECT    e2.display_name
                  FROM      employees e2
                  WHERE     e2.id = e.id_manager
                ) AS manager,
                ( SELECT    e2.email
                  FROM      employees e2
                  WHERE     e2.id = e.id_manager
                ) AS manager_email ,
                es.name AS emp_state ,
				es.sys_name as emp_state_sys_name,
                p.name AS position ,
                o.name AS organization ,
                c.name AS city ,
                d.name AS department ,
				case when male=1 then 1 else 0 end as male,
				id_position_org,
				p_org.name as position_org,
				CASE WHEN e.has_ad_account = 1 THEN 1 ELSE 0 END AS has_ad_account,
				ad_login,
				e.dattim1 as date_create
				,
				CASE WHEN @get_photo = 1
                     THEN ( SELECT TOP 1
                                    picture
                            FROM    photos ph
                            WHERE   ph.enabled = 1
                                    AND ph.id_employee = e.id
                          )
                     ELSE NULL
                END AS photo,
				full_name_dat,
				full_name_rod,				
				CASE WHEN e.id_department IS NOT NULL THEN 
				CASE WHEN EXISTS(SELECT 1 FROM departments dd WHERE dd.enabled=1 and dd.id_chief=e.id) THEN 1 ELSE 0 end
				ELSE NULL END AS is_chief,
				d.hidden as is_hidden,
				e.date_fired,
				id_budget
        FROM    employees e
		INNER JOIN employee_states es ON e.id_emp_state = es.id
                INNER JOIN positions p ON e.id_position = p.id
				INNER JOIN positions p_org ON e.id_position_org = p_org.id
                INNER JOIN organizations o ON e.id_organization = o.id
                INNER JOIN cities c ON e.id_city = c.id
                INNER JOIN departments d ON e.id_department = d.id
        WHERE ((@id is null or @id <= 0) or (@id is not null and @id > 0 and e.id = @id))
		and ((@ad_sid is null or @ad_sid = '') or (@ad_sid is not null and @ad_sid != '' and e.ad_sid = @ad_sid))
    END
GO
PRINT N'Creating [dbo].[get_employee_list]...';


GO
CREATE PROCEDURE [dbo].[get_employee_list]
	@id INT = NULL ,
    @id_emp_state INT = NULL ,
    @get_photo BIT = 0 ,
    @id_department INT = NULL,
	@ad_sid VARCHAR(46) = NULL,
	@id_city INT = NULL,
	@id_manager int = null,
	@id_budget int = null
AS
    BEGIN
        SET NOCOUNT ON;
        SELECT  e.id ,
                ad_sid ,
                id_manager ,
                surname ,
                e.name ,
                patronymic ,
                e.full_name ,
                display_name ,
                id_position ,
                id_organization ,
                email ,
                work_num ,
                mobil_num ,
                id_emp_state ,
                id_department ,
                id_city ,
                date_came ,
                birth_date ,
                manager,
                manager_email ,
                emp_state ,
                position ,
                organization ,
                city ,
                department ,
                CASE WHEN @get_photo = 1
                     THEN ( SELECT TOP 1
                                    picture
                            FROM    photos ph
                            WHERE   ph.enabled = 1
                                    AND ph.id_employee = e.id
                          )
                     ELSE NULL
                END AS photo,
				CASE WHEN @id_department IS NOT NULL THEN 
				CASE WHEN EXISTS(SELECT 1 FROM departments dd WHERE dd.id=@id_department AND dd.id_chief=e.id) THEN 0 ELSE 1 end
				ELSE NULL END AS is_chief,
				 male,
				id_position_org,
				position_org,
				has_ad_account,
				ad_login,
				is_hidden,
				id_budget
        FROM    employees_view e
        WHERE  
		( @id IS NULL 
                      OR ( @id IS NOT NULL
                           AND @id > 0
                           AND e.id = @id
                         )
                    )
				AND ( @ad_sid IS NULL OR @ad_sid = ''
                      OR ( @ad_sid IS NOT NULL
                           AND @ad_sid != ''
                           AND e.ad_sid = @ad_sid
                         )
                    )	
                AND ( ( @id_department IS NULL
                        OR @id_department <= 0
                      )
                      OR ( @id_department IS NOT NULL
                           AND @id_department > 0
                           AND id_department = @id_department
                         )
                    )
					AND ( ( @id_city IS NULL
                        OR @id_city <= 0
                      )
                      OR ( @id_city IS NOT NULL
                           AND @id_city > 0
                           AND id_city = @id_city
                         )
                    )
					AND ( ( @id_manager IS NULL
                        OR @id_manager <= 0
                      )
                      OR ( @id_manager IS NOT NULL
                           AND @id_manager > 0
                           AND id_manager = @id_manager
                         )
                    )
					AND ( ( @id_budget IS NULL
                        OR @id_budget <= 0
                      )
                      OR ( @id_budget IS NOT NULL
                           AND @id_budget > 0
                           AND id_budget = @id_budget
                         )
                    )
					ORDER BY is_chief, e.full_name
    END
GO
PRINT N'Creating [dbo].[get_employee_sm]...';


GO
CREATE PROCEDURE [dbo].[get_employee_sm]
    @id INT = NULL ,
	@ad_sid VARCHAR(46) = NULL
AS
    BEGIN
        SET NOCOUNT ON;
        SELECT  e.id ,
                ad_sid ,
                e.full_name ,
                display_name ,
				email,
				d.name    as dep_name   ,
				p.name as pos_name        
        FROM    employees_view e
		inner join departments_view d on e.id_department=d.id
		inner join positions p on p.id=e.id_position
        WHERE ((@id is null or @id <= 0) or (@id is not null and @id > 0 and e.id = @id))
		and ((@ad_sid is null or @ad_sid = '') or (@ad_sid is not null and @ad_sid != '' and e.ad_sid = @ad_sid))
    END
GO
PRINT N'Creating [dbo].[get_employees_birthday]...';


GO
CREATE PROCEDURE [dbo].[get_employees_birthday]
    @day DATE = NULL ,
    @month INT = NULL
AS
    BEGIN
        SELECT  *
        FROM    employees_view e
        WHERE  e.is_hidden = 0 and ( @day IS NULL
                  OR ( @day IS NOT NULL
                       AND month(e.birth_date) = month(@day) and day(e.birth_date) = day(@day)
                     )
                )
                AND ( @month IS NULL
                      OR ( @month IS NOT NULL
                           AND MONTH(e.birth_date) = @month
                         )
                    )
					order by month(birth_date), day(birth_date)
    END
GO
PRINT N'Creating [dbo].[get_employees_newbie]...';


GO
CREATE PROCEDURE [dbo].[get_employees_newbie]
	@date_came date
AS
    BEGIN
        SET NOCOUNT ON;
		--select id, full_name, position,city,department, date_newbie
		--from (
		SELECT id, full_name, position,city,department
		--, case when date_came is not null and convert(date,date_came) > convert(date,date_create) then convert(date,date_came) else convert(date,date_create) end as date_newbie
		FROM employees_view e where e.is_hidden = 0 and newvbie_delivery = 0
		--) as t
		--where t.date_newbie = @date_came
    END
GO
PRINT N'Creating [dbo].[get_expires_vendor_state_list]...';


GO
CREATE PROCEDURE [dbo].[get_expires_vendor_state_list]
@expires bit = 0,
@newbie bit = 0,
@updated bit = 0
	AS begin
set nocount on;
if @expires = 1
begin
	select vs.id,  v.name as vendor_name, vs.descr, date_end, o.name as organization_name, l.name as language, pic_data, vs.name
	from vendor_states vs 
	inner join vendors v on v.id=vs.id_vendor
	inner join organizations o on o.id=vs.id_organization
	inner join languages l on l.id=vs.id_language
	where vs.enabled=1 and convert(date,date_end) <= convert(date,dateadd(month, 2, getdate())) and expired_delivery_sent = 0 
	end
	else if @newbie = 1
	begin
	select vs.id,  v.name as vendor_name, vs.descr, date_end, o.name as organization_name, l.name as language, pic_data, vs.name
	from vendor_states vs 
	inner join vendors v on v.id=vs.id_vendor
	inner join organizations o on o.id=vs.id_organization
	inner join languages l on l.id=vs.id_language
	where vs.enabled=1 and new_delivery_sent = 0 
	end
	else if @updated = 1
	begin
	select vs.id,  v.name as vendor_name, vs.descr, date_end, o.name as organization_name, l.name as language, pic_data, vs.name
	from vendor_states vs 
	inner join vendors v on v.id=vs.id_vendor
	inner join organizations o on o.id=vs.id_organization
	inner join languages l on l.id=vs.id_language
	where vs.enabled=1 and update_delivery_sent = 0 
	end
end
GO
PRINT N'Creating [dbo].[get_holiday_work_confirms]...';


GO
CREATE PROCEDURE [dbo].[get_holiday_work_confirms]
	@date date
AS
begin set nocount on;
	select distinct full_name from holiday_work_confirms hwc where hwc.enabled=1 and convert(date,hwc.dattim1) = @date

end
GO
PRINT N'Creating [dbo].[get_holiday_work_delivery_recipient_list]...';


GO
CREATE PROCEDURE [dbo].[get_holiday_work_delivery_recipient_list]
AS
	begin

	set nocount on;
		select email from employees_view e where dep_sys_name = 'PERSDEP' and pos_sys_name in ('PERSDIRECTOR', 'PERSMGR')
	end
GO
PRINT N'Creating [dbo].[get_language_list]...';


GO
CREATE PROCEDURE [dbo].[get_language_list]
	as begin
	set nocount on;

	select id, name from languages
	order by order_num, name

	end
GO
PRINT N'Creating [dbo].[get_next_work_day]...';


GO
CREATE PROCEDURE [dbo].[get_next_work_day]
	@date date
AS
begin
set nocount on;
	select top 1 [date] from work_days wd
	where wd.date > @date

end
GO
PRINT N'Creating [dbo].[get_org_state_image]...';


GO
CREATE PROCEDURE [dbo].[get_org_state_image]
	@id_organization int
	as begin
	set nocount on;
	select id, data,id_organization from org_state_images o
	where enabled=1 and id_organization = @id_organization
	end
GO
PRINT N'Creating [dbo].[get_organization]...';


GO
CREATE PROCEDURE [dbo].[get_organization] @id INT = NULL, @sys_name nvarchar(50) = null
AS
    BEGIN
        SET NOCOUNT ON;
        SELECT  id ,
                name ,
                ( SELECT    COUNT(1)
                  FROM      employees_view e
                  WHERE     e.id_organization = o.id
                ) AS emp_count ,
                address_ur ,
                address_fact ,
                phone ,
                email ,
                inn ,
                kpp ,
                ogrn ,
                rs ,
                bank ,
                ks ,
                bik ,
                okpo ,
                okved ,
                manager_name ,
                manager_name_dat ,
                manager_position ,
                manager_position_dat,
				site,
				director_sid,
				id_director
        FROM    organizations o
        WHERE   o.enabled = 1
                AND ( @id IS NULL
                      OR ( @id IS NOT NULL
                           AND @id > 0
                           AND o.id = @id
                         )
                    )
					AND ( @sys_name IS NULL or @sys_name = ''
                      OR ( @sys_name IS NOT NULL
                           AND @sys_name != ''
                           AND o.sys_name = @sys_name
                         )
                    )
        ORDER BY name
    END
GO
PRINT N'Creating [dbo].[get_organization_link_count]...';


GO
CREATE PROCEDURE [dbo].[get_organization_link_count]
(
	@id int
)
AS
BEGIN
	select count(1) from employees_view e where e.id_organization=@id
END
GO
PRINT N'Creating [dbo].[get_other_employee_list]...';


GO
CREATE PROCEDURE [dbo].[get_other_employee_list]
@id_emp_state int,
@id_department int = null
	AS
    BEGIN
        SET NOCOUNT ON;
        SELECT  e.id ,
                e.full_name ,
                p.name AS position ,
                o.name AS organization ,
                c.name AS city ,
                d.name AS department ,
                CASE WHEN male = 1 THEN 1
                     ELSE 0
                END AS male ,
                id_position_org ,
                p_org.name AS position_org,
				d.hidden as is_hidden
        FROM    employees e
                INNER JOIN employee_states st ON e.id_emp_state = st.id
                INNER JOIN positions p ON e.id_position = p.id
                INNER JOIN positions p_org ON e.id_position_org = p_org.id
                INNER JOIN organizations o ON e.id_organization = o.id
                INNER JOIN cities c ON e.id_city = c.id
                INNER JOIN departments d ON e.id_department = d.id
        WHERE   e.enabled = 1 and e.id_emp_state = @id_emp_state
		 AND ( ( @id_department IS NULL
                        OR @id_department <= 0
                      )
                      OR ( @id_department IS NOT NULL
                           AND @id_department > 0
                           AND id_department = @id_department
                         )
                    )
					ORDER BY e.full_name
                         
    END
GO
PRINT N'Creating [dbo].[get_position]...';


GO
CREATE PROCEDURE [dbo].[get_position]
	@id int = null
AS
begin
SET NOCOUNT ON;
	select id, name,
	name_rod,
	(
	select count(1) from employees_view e  where e.id_position=p.id
	) as emp_count
	,name_dat
	 from positions p
	where p.enabled=1
	AND ( @id IS NULL
                      OR ( @id IS NOT NULL
                           AND @id > 0
                           AND p.id = @id
                         )
                    )
					order by name
end
GO
PRINT N'Creating [dbo].[get_position_link_count]...';


GO
CREATE Procedure [dbo].[get_position_link_count]
(
	@id int
)
AS
BEGIN
	select count(1) from employees_view e where e.id_position=@id
END
GO
PRINT N'Creating [dbo].[get_subordinate_list]...';


GO
CREATE PROCEDURE [dbo].[get_subordinate_list]
	@sid varchar(46)
AS
	begin

	set nocount on;
	declare @id_department int
	select @id_department = id_department from employees_view e where e.ad_sid = @sid and e.is_chief = 1

	if @id_department is not null and @id_department > 0
	begin
with deps as (
   select id, id_parent
   from dbo.departments
   where id = @id_department
   union all
   select c.id, c.id_parent
   from departments c
     join deps p on p.id = c.id_parent 
)

SELECT * FROM dbo.employees_view e
WHERE e.ad_sid <> @sid and e.id_department IN (SELECT id FROM deps)
end

	end
GO
PRINT N'Creating [dbo].[get_vendor]...';


GO
CREATE PROCEDURE [dbo].[get_vendor]
	@id int = null
AS
	begin set nocount on;
	select id, name, descr, creator_sid from vendors
	where enabled=1 and (@id is null or @id <= 0 or (@id is not null and @id > 0 and id=@id))

	end
GO
PRINT N'Creating [dbo].[get_vendor_state]...';


GO
CREATE PROCEDURE [dbo].[get_vendor_state]
	@id int
AS begin
set nocount on;
	select vs.id, vs.id_vendor , vs.descr, date_end, vs.id_organization, vs.id_language, pic_data, creator_sid, vs.name
	from vendor_states  vs 	
	where vs.id=@id
end
GO
PRINT N'Creating [dbo].[get_vendor_state_history]...';


GO
CREATE PROCEDURE [dbo].[get_vendor_state_history]
	@id int
AS begin
set nocount on;
	select  vs.id,  v.name as vendor_name, vs.descr, date_end, o.name as organization_name, l.name as language, pic_data, 
	(select display_name FROM dbo.employees e WHERE e.ad_sid= vs.creator_sid) AS creator, vs.dattim1 AS date_create, vs.name
	from vendor_states vs 
	inner join vendors v on v.id=vs.id_vendor
	inner join organizations o on o.id=vs.id_organization
	inner join languages l on l.id=vs.id_language
	where vs.id=@id or old_id =@id
	order by vs.dattim2 desc
end
GO
PRINT N'Creating [dbo].[get_vendor_state_list]...';


GO
CREATE PROCEDURE [dbo].[get_vendor_state_list]
AS begin
set nocount on;
	select vs.id,  v.name as vendor_name, vs.descr, date_end, o.name as organization_name, l.name as language, pic_data, vs.name
	from vendor_states vs 
	inner join vendors v on v.id=vs.id_vendor
	inner join organizations o on o.id=vs.id_organization
	inner join languages l on l.id=vs.id_language
	where vs.enabled=1	
	order by v.name
end
GO
PRINT N'Creating [dbo].[get_vendor_state_prev_version]...';


GO
CREATE PROCEDURE [dbo].[get_vendor_state_prev_version]
	@id int
AS
	begin set nocount on;

	select vs_old.id, (select name from vendors v where v.id=vs_old.id_vendor) as vendor_name , vs_old.descr, vs_old.date_end, 
	(select name from organizations o where o.id=vs_old.id_organization) as organization_name, (select name from languages l where l.id=vs_old.id_language) as language, vs_old.pic_data, vs_old.creator_sid, vs_old.name
from vendor_states vs inner join vendor_states vs_old on vs.id=vs_old.old_id AND vs_old.id = (SELECT MAX(id) FROM vendor_states old WHERE old.old_id=@id)
where vs.id=@id 

	end
GO
PRINT N'Creating [dbo].[rest_holiday_check_period_cross]...';


GO
CREATE PROCEDURE [dbo].[rest_holiday_check_period_cross]
	@employee_sid varchar(46),
	@start_date date,
	@end_date date
	as begin
	set nocount on;
	
	if exists(select 1 from rest_holidays rh where rh.enabled=1 and rh.employee_sid=@employee_sid and (@start_date between convert(date,rh.start_date) and convert(date, rh.end_date) 
	or @end_date between convert(date,rh.start_date) and convert(date,rh.end_date)))
	begin
		--Попадает в другой период
		select 1 as result
	end
	else
	begin
	--НЕ попадает в другой период
		select 0 as result
	end
	end
GO
PRINT N'Creating [dbo].[rest_holiday_close]...';


GO
CREATE PROCEDURE [dbo].[rest_holiday_close]
	@id int,
	@deleter_sid varchar(46)
AS
	begin
	set nocount on;
	update rest_holidays
	set enabled=0, deleter_sid=@deleter_sid, dattim2=getdate()
	where id=@id
	end
GO
PRINT N'Creating [dbo].[rest_holiday_employee_list]...';


GO
CREATE PROCEDURE [dbo].[rest_holiday_employee_list]
	@year int
AS
	begin
	set nocount on;
	select duration, t.employee_sid, e.display_name as emlpoyee_name, period_count, 
	(case when exists(select 1 from rest_holidays rh2	
	where rh2.enabled=1 and rh2.year=@year and rh2.employee_sid=t.employee_sid and rh2.confirmed = 0 and rh2.can_edit= 0) then 1 else 0 end) as has_blocked_periods
	from (
	select sum(rh.duration) as duration, employee_sid, count(1) as period_count
	from rest_holidays rh	
	where rh.enabled=1
	and year=@year and (can_edit = 0 and confirmed = 0)
	group by employee_sid
	) as t
	inner join employees e on t.employee_sid = e.ad_sid	
	order by employee_sid
	end
GO
PRINT N'Creating [dbo].[rest_holiday_employee_year_confirm]...';


GO
CREATE PROCEDURE [dbo].[rest_holiday_employee_year_confirm]
	@employee_sid varchar(46),
	@year int,
	@can_edit bit = null,
	@confirmed bit = null,
	@creator_sid varchar(46) = null
AS
begin
set nocount on;

if (@can_edit is not null)
begin
update rest_holidays
set can_edit=@can_edit, can_edit_creator_sid=@creator_sid
where employee_sid=@employee_sid and year=@year and confirmed=0
end

if @confirmed is not null
begin
update rest_holidays
set confirmed=@confirmed, confirmator_sid=@creator_sid
where  employee_sid=@employee_sid and year=@year
end
end
GO
PRINT N'Creating [dbo].[rest_holiday_get]...';


GO
CREATE PROCEDURE [dbo].[rest_holiday_get]
	@id int
AS
	begin
	set nocount on;
	select rh.id, rh.start_date, rh.end_date, rh.duration, case when can_edit=1 and confirmed=0 then 1 else 0 end as can_edit,
	case when confirmed=1 then 1 else 0 end as confirmed, employee_sid, e.display_name as employee_name, rh.year
	from rest_holidays rh
	inner join employees e on rh.employee_sid = e.ad_sid
	where rh.id=@id
	end
GO
PRINT N'Creating [dbo].[rest_holiday_list]...';


GO
CREATE PROCEDURE [dbo].[rest_holiday_list]
	@employee_sid varchar(46) = null,
	@year int
AS
	begin
	set nocount on;
	select rh.id, rh.start_date, rh.end_date, rh.duration, case when can_edit=1 and confirmed=0 then 1 else 0 end as can_edit,
	case when confirmed=1 then 1 else 0 end as confirmed, employee_sid, e.display_name as employee_name, rh.year
	from rest_holidays rh
	inner join employees e on rh.employee_sid = e.ad_sid
	where rh.enabled=1
	and (@employee_sid is null or @employee_sid = '' or (@employee_sid is not null and @employee_sid != '' and rh.employee_sid=@employee_sid))
	and (@year is null or @year <=0 or (@year is not null and @year > 0 and year=@year))
	order by employee_sid, year, start_date
	end
GO
PRINT N'Creating [dbo].[rest_holiday_list_confirm]...';


GO
CREATE PROCEDURE [dbo].[rest_holiday_list_confirm]
	@id_array nvarchar(max),
	@can_edit bit = null,
	@confirmed bit = null,
	@creator_sid varchar(46) = null
AS
begin
set nocount on;

if (@can_edit is not null)
begin
update rest_holidays
set can_edit=@can_edit, can_edit_creator_sid=@creator_sid
where id in (select value from SplitInt(@id_array, ',')) and confirmed=0
end

if @confirmed is not null
begin
update rest_holidays
set confirmed=@confirmed, confirmator_sid=@creator_sid
where id in (select value from SplitInt(@id_array, ','))
end
end
GO
PRINT N'Creating [dbo].[rest_holiday_save]...';


GO
CREATE PROCEDURE [dbo].[rest_holiday_save]
	@employee_sid varchar(46),
	@start_date datetime,
	@end_date datetime,
	@duration int,
	@creator_sid varchar(46),
	@year int = null
AS
begin
set nocount on;
declare @id int
if @year is null or @year <= 0
begin
select @year = Year(@start_date)
end

insert into rest_holidays(employee_sid, start_date,end_date,duration, creator_sid, year)
values(@employee_sid, @start_date,@end_date,@duration, @creator_sid, @year)

set @id= SCOPE_IDENTITY()
select @id as id
end
GO
PRINT N'Creating [dbo].[rest_holiday_years_list]...';


GO
CREATE PROCEDURE [dbo].[rest_holiday_years_list]
	@employee_sid varchar(46)=null,
	@top_rows int = null,
	@year int = null
AS
begin
set nocount on;
if @top_rows is null
begin
set @top_rows = 10000
end

select top (@top_rows) [year], sum(duration) as days_count
from
(
	select rh.[year], rh.duration from rest_holidays rh
	where rh.enabled=1 and
	(@employee_sid is null or @employee_sid = '' or (@employee_sid is not null and @employee_sid!= '' and rh.employee_sid=@employee_sid))
	and (@year is null or @year <=0 or (@year is not null and @year > 0 and rh.year = @year))
	union 
	select year(getdate()) as [year], 0 as duration
	union 
	select year(DATEADD(year, 1, getdate())) as [year], 0 as duration) as t
	where t.[year] > 2015 and (@year is null or @year <=0 or (@year is not null and @year > 0 and t.year = @year))
	group by [year]
	order by [year]
end
GO
PRINT N'Creating [dbo].[save_budget]...';


GO
CREATE PROCEDURE [dbo].[save_budget]
	@id int = null,
	@name nvarchar(500),
	@creator_sid varchar(46),
	@descr nvarchar(MAX)=null,
	@id_parent int = null
AS begin
	set nocount on;
	if exists(select 1 from budget where id=@id)
	begin
		update budget
		set name=@name, descr = @descr, id_parent=@id_parent
		where id=@id
	end
	else
	begin
		insert into budget (name, creator_sid, descr, id_parent)
		values(@name, @creator_sid, @descr, @id_parent)
	end
	end
GO
PRINT N'Creating [dbo].[save_city]...';


GO
CREATE PROCEDURE [dbo].[save_city]
	@id INT = NULL ,
    @name NVARCHAR(150) ,
	@creator_sid varchar(46)=null
AS
    BEGIN
	SET NOCOUNT ON;
        IF @id IS NOT NULL
            AND @id > 0
            AND EXISTS ( SELECT 1
                         FROM   cities
                         WHERE  id = @id )
            BEGIN
                UPDATE  cities
                SET     name = @name 
                WHERE   id = @id
            END
        ELSE
            BEGIN
                INSERT  INTO cities
                        ( name ,creator_sid
                        )
                VALUES  ( @name ,@creator_sid
                        )

						SELECT @id=@@IDENTITY
            END
	 
		SELECT @id AS id
    END
GO
PRINT N'Creating [dbo].[save_department]...';


GO
CREATE PROCEDURE [dbo].[save_department]
    @id INT = NULL ,
    @name NVARCHAR(150) ,
    @id_parent INT ,
    @id_chief INT,
	@creator_sid varchar(46)=null
AS
    BEGIN
	SET NOCOUNT ON;
        IF @id IS NOT NULL
            AND @id > 0
            AND EXISTS ( SELECT 1
                         FROM   departments d
                         WHERE  id = @id )
            BEGIN
                UPDATE  departments
                SET     name = @name ,
                        id_parent = @id_parent ,
                        id_chief = @id_chief
                WHERE   id = @id
            END
        ELSE
            BEGIN
                INSERT  INTO departments
                        ( name ,
                          id_parent ,
                          id_chief  ,creator_sid
                        )
                VALUES  ( @name ,
                          @id_parent ,
                          @id_chief  ,@creator_sid
                        )

						SELECT @id=@@IDENTITY
            END
	 
		SELECT @id AS id
    END
GO
PRINT N'Creating [dbo].[save_doc_meet_link]...';


GO
CREATE PROCEDURE [dbo].[save_doc_meet_link] 
	@id_document INT,
	@id_department INT = NULL,
	@id_position INT = NULL,
	@id_employee INT = NULL,
	@creator_sid varchar(46) = null
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @id int
    INSERT INTO document_meet_links (id_document, id_department, id_position, id_employee, creator_sid)
    VALUES (@id_document, @id_department, @id_position, @id_employee, @creator_sid)
    SET @id = @@IDENTITY
    SELECT @id AS id
END
GO
PRINT N'Creating [dbo].[save_document]...';


GO
CREATE PROCEDURE [dbo].[save_document] 
	@data VARBINARY(MAX),
	@name NVARCHAR(500),
	@creator_sid VARCHAR(46)
AS
BEGIN
	SET NOCOUNT ON;
DECLARE @id int
   INSERT INTO documents (data, name,creator_sid)
   VALUES(@data, @name, @creator_sid)
   SET @id=@@IDENTITY
   SELECT @id AS  id
END
GO
PRINT N'Creating [dbo].[save_employee]...';


GO
CREATE PROCEDURE [dbo].[save_employee]
    @id INT = NULL ,
    @ad_sid VARCHAR(46) ,
    @id_manager INT ,
    @surname NVARCHAR(50) ,
    @name NVARCHAR(50) ,
    @patronymic NVARCHAR(50)=null ,
    @full_name NVARCHAR(150) ,
    @display_name NVARCHAR(100) ,
    @id_position INT ,
    @id_organization INT ,
    @email NVARCHAR(150) = null,
    @work_num NVARCHAR(50)  = null,
    @mobil_num NVARCHAR(50)  = null,
    @id_emp_state INT ,
    @id_department INT ,
    @id_city INT ,
    @date_came DATE =null ,
	@birth_date date= null,
	@male bit,
	@id_position_org int,
	@has_ad_account bit,
	@creator_sid varchar(46)=null,
	@date_fired date = null,
	@full_name_dat nvarchar(150) = null,
	@full_name_rod nvarchar(150) = null,
	@id_budget int = null
AS
    BEGIN
        SET NOCOUNT ON;
        IF @id IS NOT NULL
            AND @id > 0
            AND EXISTS ( SELECT 1
                         FROM   employees
                         WHERE  id = @id )
            BEGIN
			if (@full_name_dat is null or ltrim(rtrim(@full_name_dat)) = '')
			begin
				set @full_name_dat = (select full_name_dat from employees where id=@id)
			end
			if (@full_name_rod is null or ltrim(rtrim(@full_name_rod)) = '')
			begin
				set @full_name_rod = (select full_name_rod from employees where id=@id)
			end
			if (@ad_sid is null or ltrim(rtrim(@ad_sid)) = '')
			begin
				set @ad_sid = (select ad_sid from employees where id=@id)
			end
			if (@id_manager is null or @id_manager<=0)
			begin
				set @id_manager = (select id_manager from employees where id=@id)
			end
			if (@surname is null or ltrim(rtrim(@surname)) = '')
			begin
				set @surname = (select surname from employees where id=@id)
			end
			if (@name is null or ltrim(rtrim(@name)) = '')
			begin
				set @name = (select name from employees where id=@id)
			end
			if (@patronymic is null or ltrim(rtrim(@patronymic)) = '')
			begin
				set @patronymic = (select patronymic from employees where id=@id)
			end
			if (@full_name is null or ltrim(rtrim(@full_name)) = '')
			begin
				set @full_name = (select full_name from employees where id=@id)
			end
			if (@display_name is null or ltrim(rtrim(@display_name)) = '')
			begin
				set @display_name = (select display_name from employees where id=@id)
			end
			if (@id_position is null or @id_position<=0)
			begin
				set @id_position = (select id_position from employees where id=@id)
			end
			if (@id_organization is null or @id_organization<=0)
			begin
				set @id_organization = (select id_organization from employees where id=@id)
			end
			if (@email is null or ltrim(rtrim(@email)) = '')
			begin
				set @email = (select email from employees where id=@id)
			end
			if (@work_num is null or ltrim(rtrim(@work_num)) = '')
			begin
				set @work_num = (select work_num from employees where id=@id)
			end
			if (@mobil_num is null or ltrim(rtrim(@mobil_num)) = '')
			begin
				set @mobil_num = (select mobil_num from employees where id=@id)
			end
			if (@id_department is null or @id_department<=0)
			begin
				set @id_department = (select id_department from employees where id=@id)
			end
			if (@id_city is null or @id_city<=0)
			begin
				set @id_city = (select id_city from employees where id=@id)
			end
			if (@date_came is null)
			begin
				set @date_came = (select date_came from employees where id=@id)
			end
			if (@birth_date is null)
			begin
				set @birth_date = (select birth_date from employees where id=@id)
			end
			if (@male is null)
			begin
				set @male = (select male from employees where id=@id)
			end
			if (@id_position_org is null or @id_position_org<=0)
			begin
				set @id_position_org = (select id_position_org from employees where id=@id)
			end
			if (@has_ad_account is null)
			begin
				set @has_ad_account = (select has_ad_account from employees where id=@id)
			end
			if (@full_name_dat is null or ltrim(rtrim(@full_name_dat)) = '')
			begin
				set @full_name_dat = (select full_name_dat from employees where id=@id)
			end
			if (@full_name_rod is null or ltrim(rtrim(@full_name_rod)) = '')
			begin
				set @full_name_rod = (select full_name_rod from employees where id=@id)
			end
			if (@id_budget is null or @id_budget <=0)
			begin
				set @id_budget = (select id_budget from employees where id=@id)
			end

                UPDATE  employees
                SET     ad_sid = @ad_sid ,
                        id_manager = @id_manager ,
                        surname = @surname ,
                        NAME = @name ,
                        patronymic = @patronymic ,
                        full_name = @full_name ,
                        display_name = @display_name ,
                        id_position = @id_position ,
                        id_organization = @id_organization ,
                        email = @email ,
                        work_num = @work_num ,
                        mobil_num = @mobil_num ,
                        --id_emp_state = @id_emp_state ,
                        id_department = @id_department ,
                        id_city = @id_city ,
                        date_came = @date_came,
						birth_date=@birth_date,
						male=@male,
						id_position_org=@id_position_org,
						has_ad_account = @has_ad_account,
						full_name_dat = @full_name_dat,
						full_name_rod = @full_name_rod,
						id_budget = @id_budget
                WHERE   id = @id
            END
        ELSE
            BEGIN
                INSERT  INTO employees
                        ( ad_sid ,
                          id_manager ,
                          surname ,
                          name ,
                          patronymic ,
                          full_name ,
                          display_name ,
                          id_position ,
                          id_organization ,
                          email ,
                          work_num ,
                          mobil_num ,
                          id_emp_state ,
                          id_department ,
                          id_city ,
                          date_came ,
						  birth_date,
						  male,
						  id_position_org,
						  has_ad_account,
						  creator_sid,
						  full_name_dat,
						  full_name_rod,
						  id_budget
                        )
                VALUES  ( @ad_sid ,
                          @id_manager ,
                          @surname ,
                          @name ,
                          @patronymic ,
                          @full_name ,
                          @display_name ,
                          @id_position ,
                          @id_organization ,
                          @email ,
                          @work_num ,
                          @mobil_num ,
                          @id_emp_state ,
                          @id_department ,
                          @id_city ,
                          @date_came  ,
						  @birth_date,
						  @male,
						  @id_position_org,
						  @has_ad_account,
						  @creator_sid,
						  @full_name_dat,
						  @full_name_rod,
						  @id_budget
                        )

                SELECT  @id = @@IDENTITY
            END
	 
        SELECT @id AS id
    END
GO
PRINT N'Creating [dbo].[save_holiday_work_confirm]...';


GO
CREATE PROCEDURE [dbo].[save_holiday_work_confirm]	 
	@id_hw_document INT=null,
	@employee_sid VARCHAR(46)=null,
	@full_name nvarchar(150)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    INSERT INTO holiday_work_confirms (id_hw_document, employee_sid, full_name)
    VALUES (@id_hw_document, @employee_sid, @full_name)
	declare @id int
	set @id = @@IDENTITY
	select @id as id
END
GO
PRINT N'Creating [dbo].[save_holiday_work_document]...';


GO
CREATE PROCEDURE [dbo].[save_holiday_work_document]	 
	@date_start DATE,
	@date_end DATE,
	@creator_sid VARCHAR(46)
AS
BEGIN
	SET NOCOUNT ON;

    INSERT INTO holiday_work_documents (date_start, date_end, creator_sid)
    VALUES (@date_start,@date_end, @creator_sid)
    
END
GO
PRINT N'Creating [dbo].[save_org_state_image]...';


GO
CREATE PROCEDURE [dbo].[save_org_state_image]
	@id_organization INT,
	@data VARBINARY(MAX)
AS
BEGIN
set NOCOUNT ON;
declare @id int
INSERT INTO org_state_images(id_organization, data)
values(@id_organization, @data)
select @id=@@IDENTITY
select @id as id
END
GO
PRINT N'Creating [dbo].[save_organization]...';


GO
CREATE PROCEDURE [dbo].[save_organization]
    @id INT = NULL ,
    @name NVARCHAR(150) ,
    @creator_sid VARCHAR(46) = NULL ,
    @address_ur NVARCHAR(500) = NULL ,
    @address_fact NVARCHAR(500) = NULL ,
    @phone NVARCHAR(50) = NULL ,
    @email NVARCHAR(50) = NULL ,
    @inn NVARCHAR(12) = NULL ,
    @kpp NVARCHAR(20) = NULL ,
    @ogrn NVARCHAR(20) = NULL ,
    @rs NVARCHAR(50) = NULL ,
    @bank NVARCHAR(500) = NULL ,
    @ks NVARCHAR(50) = NULL ,
    @bik NVARCHAR(50) = NULL ,
    @okpo NVARCHAR(50) = NULL ,
    @okved NVARCHAR(50) = NULL ,
    @manager_name NVARCHAR(150) = NULL ,
    @manager_name_dat NVARCHAR(150) = NULL ,
    @manager_position NVARCHAR(250) = NULL ,
    @manager_position_dat NVARCHAR(250) = NULL,
	@site NVARCHAR(50) = NULL,
	@director_sid varchar(46)=null,
	@id_director int
AS
    BEGIN
        SET NOCOUNT ON;
        IF @id IS NOT NULL
            AND @id > 0
            AND EXISTS ( SELECT 1
                         FROM   organizations
                         WHERE  id = @id )
            BEGIN
                UPDATE  organizations
                SET     name = @name,
				address_ur =@address_ur,
                          address_fact = @address_fact,
                          phone = @phone,
                          email = @email,
                          inn = @inn,
                          kpp = @kpp,
                          ogrn = @ogrn,
                          rs = @rs,
                          bank = @bank,
                          ks = @ks,
                          bik = @bik,
                          okpo = @okpo,
                          okved = @okved,
                          manager_name = @manager_name,
                          manager_name_dat = @manager_name_dat,
                          manager_position = @manager_position,
                          manager_position_dat =@manager_position_dat,
						  SITE = @site,
						  director_sid = @director_sid,
						  id_director = @id_director
                WHERE   id = @id
            END
        ELSE
            BEGIN
                INSERT  INTO organizations
                        ( name ,
                          creator_sid ,
                          address_ur ,
                          address_fact ,
                          phone ,
                          email ,
                          inn ,
                          kpp ,
                          ogrn ,
                          rs ,
                          bank ,
                          ks ,
                          bik ,
                          okpo ,
                          okved ,
                          manager_name ,
                          manager_name_dat ,
                          manager_position ,
                          manager_position_dat ,
						  site,
						  director_sid,
						  id_director
                        )
                VALUES  ( @name ,
                          @creator_sid ,
                          @address_ur ,
                          @address_fact ,
                          @phone ,
                          @email ,
                          @inn ,
                          @kpp ,
                          @ogrn ,
                          @rs ,
                          @bank ,
                          @ks ,
                          @bik ,
                          @okpo ,
                          @okved ,
                          @manager_name ,
                          @manager_name_dat ,
                          @manager_position ,
                          @manager_position_dat ,
						  @site,
						  @director_sid,
						  @id_director
                        )

                SELECT  @id = @@IDENTITY
            END
	 
        SELECT  @id AS id
    END
GO
PRINT N'Creating [dbo].[save_photo]...';


GO
CREATE PROCEDURE [dbo].[save_photo]
    @id_employee INT ,
    @picture IMAGE,
	@creator_sid varchar(46) = null
AS
    BEGIN
        SET nocount ON;
        IF EXISTS ( SELECT  1
                    FROM    photos p
                    WHERE   p.id_employee = @id_employee )
            BEGIN
                UPDATE  photos
                SET     picture = @picture
				where id_employee = @id_employee
            END
        ELSE
            BEGIN
                INSERT  INTO photos
                        ( id_employee ,picture, creator_sid )
                VALUES  ( @id_employee, @picture, @creator_sid )
            END
    END
GO
PRINT N'Creating [dbo].[save_position]...';


GO
CREATE PROCEDURE [dbo].[save_position]
	@id INT = NULL ,
    @name NVARCHAR(500),
	@creator_sid varchar(46)=NULL,
	@name_rod NVARCHAR(500),
	@name_dat nvarchar(500)
AS
    BEGIN
	SET NOCOUNT ON;
        IF @id IS NOT NULL
            AND @id > 0
            AND EXISTS ( SELECT 1
                         FROM   positions
                         WHERE  id = @id )
            BEGIN
                UPDATE  positions
                SET     name = @name , name_rod=@name_rod, name_dat=@name_dat
                WHERE   id = @id
            END
        ELSE
            BEGIN
                INSERT  INTO positions
                        ( name  ,creator_sid, name_rod,name_dat
                        )
                VALUES  ( @name  ,@creator_sid, @name_rod,@name_dat
                        )

						SELECT @id=@@IDENTITY
            END
	 
		SELECT @id AS id
    END
GO
PRINT N'Creating [dbo].[save_vendor]...';


GO
CREATE PROCEDURE [dbo].[save_vendor]
	@id int = null,
	@name nvarchar(150) = null,
	@descr nvarchar(max) = null,
	@creator_sid varchar(46)= null
	as begin
	set nocount on;
	if @id is not null and @id > 0 and exists(select 1 from vendors where id=@id)
	begin
		set @name = isnull(@name, (select name from vendors where id=@id))
		set @descr = isnull(@descr, (select descr from vendors where id=@id))

		update vendors
		set name=@name, descr=@descr
		where id=@id

	end
	else
	begin
		insert into vendors (name, descr, creator_sid)
		values(@name, @descr, @creator_sid)
		set @id=@@IDENTITY
	end
	select @id as id
	end
GO
PRINT N'Creating [dbo].[save_vendor_state]...';


GO
CREATE PROCEDURE [dbo].[save_vendor_state]
	@id int = null,
	@id_vendor int = null,
	@descr nvarchar(max) = null,
	@date_end datetime = null,
	@id_organization int = null,
	@id_language int = null,
	@creator_sid varchar(46),
	@pic_data varbinary(max) = null,
	@name nvarchar(150) = null
AS begin
set nocount on;
	if @id is not null and @id > 0 and exists(select 1 from vendor_states where id=@id)
	begin
	declare @pic_guid uniqueidentifier
	set @pic_guid = newid()

		insert into vendor_states (id_vendor, descr, date_end, id_organization, id_language, creator_sid, pic_data, pic_guid, old_id, dattim1, dattim2, enabled, deleter_sid, name, new_delivery_sent, expired_delivery_sent, update_delivery_sent)
		select id_vendor, descr, date_end, id_organization, id_language, creator_sid, pic_data, @pic_guid, id, dattim1, getdate(), 0, @creator_sid, name, new_delivery_sent, expired_delivery_sent, update_delivery_sent from vendor_states where id=@id

		--declare @pic_guid uniqueidentifier

		set @id_vendor = isnull(@id_vendor, (select id_vendor from vendor_states where id=@id))
		set @descr = isnull(@descr, (select descr from vendor_states where id=@id))
		set @date_end = isnull(@date_end, (select date_end from vendor_states where id=@id))
		set @id_organization = isnull(@id_organization, (select id_organization from vendor_states where id=@id))
		set @id_language = isnull(@id_language, (select id_language from vendor_states where id=@id))
		set @name = isnull(@name, (select name from vendor_states where id=@id))

		--if @pic_data != null --обновляет guid картинки если загружаем заново
		--begin
			--set @pic_guid = newid()
		--end

		set @pic_data = isnull(@pic_data, (select pic_data from vendor_states where id=@id))

		update vendor_states
		set id_vendor=@id_vendor, descr=@descr, date_end=@date_end, id_organization=@id_organization, id_language=@id_language, 
		creator_sid=@creator_sid, pic_data=@pic_data, dattim1 = getdate(), name = @name, expired_delivery_sent = 0
		where id=@id

		--если были изменения и это недавно созданный уведомление не отправлено
		if exists(select 1 
from vendor_states vs inner join vendor_states vs_old on vs.id=vs_old.old_id AND vs_old.id = (SELECT MAX(id) FROM vendor_states old WHERE old.old_id=@id)
where vs.id=@id AND vs.new_delivery_sent = 1 and (vs.id_vendor != vs_old.id_vendor or LTRIM(RTRIM(vs.descr))!=RTRIM(LTRIM(vs_old.descr)) 
or vs.date_end!=vs_old.date_end or vs.id_organization != vs_old.id_organization or vs.id_language!=vs_old.id_language or vs.pic_data!=vs_old.pic_data))
begin
update vendor_states
set update_delivery_sent=0
where id=@id
end

	end
	else
	begin
		insert into vendor_states (id_vendor, descr, date_end, id_organization, id_language, creator_sid, pic_data, name, new_delivery_sent, expired_delivery_sent, update_delivery_sent)
		values(@id_vendor,@descr, @date_end, @id_organization, @id_language, @creator_sid, @pic_data, @name, 0, 0, 1)
		set @id=@@IDENTITY
	end
	select @id as id
end
GO
PRINT N'Creating [dbo].[set_employee_date_fired]...';


GO
CREATE PROCEDURE [dbo].[set_employee_date_fired]
	@id_employee int,
	@date_fired date
	as begin set nocount on;
	update employees
	set date_fired=@date_fired
	where id=@id_employee
	end
GO
PRINT N'Creating [dbo].[set_employee_delivery_send]...';


GO
CREATE PROCEDURE [dbo].[set_employee_delivery_send]
	@id int
	as begin set nocount on;
	update employees
	set newvbie_delivery=1
	where id=@id
	end
GO
PRINT N'Creating [dbo].[set_employee_state]...';


GO
CREATE PROCEDURE [dbo].[set_employee_state]
	@id_employee int,
	@id_emp_state int
AS
begin
set nocount on;
update employees
set id_emp_state= @id_emp_state
where id = @id_employee

end
GO
PRINT N'Creating [dbo].[set_vendor_state_delivery_sent]...';


GO
CREATE PROCEDURE [dbo].[set_vendor_state_delivery_sent]
	@id int,
	@new bit = 0,
	@expired bit = 0,
	@updated bit = 0
AS
begin
if @expired=1 
begin
update vendor_states
set expired_delivery_sent=1
where id=@id
end
else
if @new = 1
begin
update vendor_states
set new_delivery_sent=1
where id=@id
end
else
if @updated = 1
begin
update vendor_states
set update_delivery_sent=1
where id=@id
end

end
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7925ff97-a267-45fb-a848-6fa5f2fe5653')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7925ff97-a267-45fb-a848-6fa5f2fe5653')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bab710db-a69c-4cfd-81f9-4b289c99f088')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bab710db-a69c-4cfd-81f9-4b289c99f088')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '823082de-8dc5-4c99-a8dd-ef76401ff9e8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('823082de-8dc5-4c99-a8dd-ef76401ff9e8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a3723de1-4beb-4652-a154-46de2422ba12')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a3723de1-4beb-4652-a154-46de2422ba12')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd7ee292b-9850-440d-9616-d8a8f37c8ae0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d7ee292b-9850-440d-9616-d8a8f37c8ae0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'eb2ab5df-e261-4998-a95f-ae5bfb59155b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('eb2ab5df-e261-4998-a95f-ae5bfb59155b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e7f65736-d392-41b7-8ebb-9f4ba1dee9dd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e7f65736-d392-41b7-8ebb-9f4ba1dee9dd')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd2eaf850-694c-4a9e-859c-9510f62c3a6d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d2eaf850-694c-4a9e-859c-9510f62c3a6d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '10667296-64fc-4f83-8fef-3cf8692fb187')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('10667296-64fc-4f83-8fef-3cf8692fb187')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cd1f7aba-4005-420b-b279-54526660c2c6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cd1f7aba-4005-420b-b279-54526660c2c6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e85b3eb9-eb91-41bc-8f17-3350b8f8734a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e85b3eb9-eb91-41bc-8f17-3350b8f8734a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5bd78363-5a25-4e53-be0f-4eb3397cbfc9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5bd78363-5a25-4e53-be0f-4eb3397cbfc9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd73f5243-d98b-4e73-bdf7-05207782c7d2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d73f5243-d98b-4e73-bdf7-05207782c7d2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5296580b-af79-40ef-8058-a120eee6eb0e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5296580b-af79-40ef-8058-a120eee6eb0e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a5e503e6-194d-4807-bdf8-ea81dfd26fdb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a5e503e6-194d-4807-bdf8-ea81dfd26fdb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5db26c6e-1291-40f2-b192-769be44d3ae7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5db26c6e-1291-40f2-b192-769be44d3ae7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dd3b36f5-0a82-4dad-8ed1-083e4fdc1852')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dd3b36f5-0a82-4dad-8ed1-083e4fdc1852')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '72634209-685d-44e2-ba29-32e812a00340')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('72634209-685d-44e2-ba29-32e812a00340')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'aebbc97b-5295-4b14-b189-6514b3640211')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('aebbc97b-5295-4b14-b189-6514b3640211')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e068b3a1-f7e7-4bc6-a2ea-1699f48e65eb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e068b3a1-f7e7-4bc6-a2ea-1699f48e65eb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ea52b8de-f887-4231-b2cb-8cd2ac2de5ea')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ea52b8de-f887-4231-b2cb-8cd2ac2de5ea')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ff489da1-765c-4f1c-96a8-56c61c622d40')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ff489da1-765c-4f1c-96a8-56c61c622d40')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a1f343ac-87da-45a0-a624-c10cf602e570')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a1f343ac-87da-45a0-a624-c10cf602e570')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ac0d019b-3346-4300-a96e-cb6766d554c5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ac0d019b-3346-4300-a96e-cb6766d554c5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '829bf348-14b0-4d11-a174-31486bbf0a80')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('829bf348-14b0-4d11-a174-31486bbf0a80')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '92296c25-d147-4ba8-98e8-4be6cfb7452d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('92296c25-d147-4ba8-98e8-4be6cfb7452d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e15275eb-b26d-4eee-beb0-f26c98dd4601')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e15275eb-b26d-4eee-beb0-f26c98dd4601')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3fcaf8df-f502-49b6-8b6a-04a6d2381137')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3fcaf8df-f502-49b6-8b6a-04a6d2381137')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f3912622-2bbc-46ce-bd79-aeb95464ad49')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f3912622-2bbc-46ce-bd79-aeb95464ad49')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a941cad8-0dba-4f16-9cc0-2f7c8e81ab84')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a941cad8-0dba-4f16-9cc0-2f7c8e81ab84')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '75cfe720-4a20-4aff-82c1-227145f811dc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('75cfe720-4a20-4aff-82c1-227145f811dc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '40221f0d-0f03-48f7-a1d9-c93b888a56f5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('40221f0d-0f03-48f7-a1d9-c93b888a56f5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '097bbe22-a5f8-49ce-a2a1-89e1cac8f268')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('097bbe22-a5f8-49ce-a2a1-89e1cac8f268')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bcd24a28-35bb-4db4-9fa8-ed851f026412')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bcd24a28-35bb-4db4-9fa8-ed851f026412')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '22aa0e5a-6677-4925-bb04-b0480e05ab86')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('22aa0e5a-6677-4925-bb04-b0480e05ab86')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9dd1cee7-c0be-40c2-8c49-083c4f13be17')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9dd1cee7-c0be-40c2-8c49-083c4f13be17')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '51cee6bb-6dd2-4018-aa4a-85232e79ede1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('51cee6bb-6dd2-4018-aa4a-85232e79ede1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '351d335d-3074-468d-b5f2-05542786b617')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('351d335d-3074-468d-b5f2-05542786b617')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c6f145e9-52d5-4729-8e11-4890e5de8fa6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c6f145e9-52d5-4729-8e11-4890e5de8fa6')

GO

GO
/*
Шаблон скрипта после развертывания							
--------------------------------------------------------------------------------------
 В данном файле содержатся инструкции SQL, которые будут добавлены в скрипт построения.		
 Используйте синтаксис SQLCMD для включения файла в скрипт после развертывания.			
 Пример:      :r .\myfile.sql								
 Используйте синтаксис SQLCMD для создания ссылки на переменную в скрипте после развертывания.		
 Пример:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GRANT EXECUTE ON SCHEMA ::dbo TO sqlUnit_prog
--:r .\ins_emp_states.sql
--:r .\ins_orgs.sql
--:r .\ins_cities.sql
--:r .\ins_positions.sql
GO

GO
PRINT N'Update complete.';


GO
